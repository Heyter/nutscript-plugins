local PLUGIN = PLUGIN

local function shuffle(tbl)
	local size = #tbl
	for i = size, 1, -1 do
	  local rand = math.random(size)
	  tbl[i], tbl[rand] = tbl[rand], tbl[i]
	end
	return tbl
end

--sounds becuz i gotta stop the sound
sound.Add({
	name = "servermachines",
	channel = CHAN_AUTO,
	level = 70,
	pitch = {95, 105},
	volume = 0.8,
	sound = "machines01.wav",
})
sound.Add({
	name = "servermachinesquiet",
	channel = CHAN_AUTO,
	level = 70,
	pitch = {95, 105},
	volume = 0.2,
	sound = "machines01.wav",
})


--it doesnt like these being down there idk

--list of areas currently marked as being admin used, exclude areas on this
PLUGIN.adminused = PLUGIN.adminused or {}

--list of active runs
PLUGIN.curRuns = PLUGIN.curRuns or {}
--[[table structure:
	[area] = { 
		--when this is made, only name desc starttime area obj and enemylist will be set
		name = "name of run",
		desc = "autogenerated desc of run",
		starttime = time this run was generated,
		active = bool of whether or not this has been accepted,
		done = bool if true the run is completed and can be turned in,
		area = area id,
		uniqueid = incrementing number
		obj = id of objective in area def,
		enemylist = the id of the selected enemy types from the area def
		enemies = table of entities that were spawned as enemies,
		items = table of items spawned,
		objitem = if the objective is someone or something, its here,
		other = table of other entities that were spawned,
		eventlist = table of event id keys and how many times theyve been picked as the values,
		players = list of players on run, double check for their run id in case they die,
		price = reward of the run, only appears once its done,
		collect = if this is true, the reward has been collected and wont appear anymore, now its just waiting to be cleared
	}
]]

--default obj functions to use
local function defaultkillalltravel(id, diff, enmcount, elist, disableitems)
	diff = diff or 1

	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]
	local players = run.players
	run.initialplayers = #players --just in case?

	--spawn enemies, put them in enemies table in run
	local enmlist = elist or run.enemylist
	if(elist) then run.enemylist = elist end
	if(enmlist) then
		local enm = 0 --cur item number
		--min/max items based on player count
		enmcount = enmcount or { --default
			[1] = {3,5}, --1 player, 1 min 3 max
			[2] = {4,6},
			[3] = {6,9},
			[4] = {7,12},
			--adding up to 8
			[5] = {8,15},
			[6] = {10,17},
			[7] = {12,19},
			[8] = {14,24},
		}
		--randomize the item spawns
		local tmpspawns = shuffle(table.Copy(def.enemySpawns))
		local breakk = false
		for k,v in pairs(tmpspawns) do

			--spawn random from enmlist
			if(type(v[1]) == "table") then
				for k2, v2 in pairs(v) do
					if(enm == enmcount[#players or #enmcount][2]) then
						breakk = true --to quit the entire thing
						break --quit spawning if at max
					end
					--if item count equals or is higher than min
					if(enm >= enmcount[#players or #enmcount][1]) then 
						--random number if itll continue spawning
						--opposite of items
						if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
							break
						end
					end
					
			
					--spawn at pos
					enm = enm+1
					local np = ents.Create(enmlist[math.random(#enmlist)])
					if(np) then
						np:SetPos(v2[1])--+Vector(0,0,16))
						np:SetAngles(v2[2]) --mebi this will work idk
						local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
						np:SetKeyValue( "spawnflags", SpawnFlags )
						np:Spawn()
						np:Activate() --just in case
						if(np.ComeonSound) then np:ComeonSound() end
						if(list.Get("NPC")[np:GetClass()]) then
						local lis = list.Get("NPC")[np:GetClass()].Weapons
						if(lis) then
						np:Give(lis[math.random(#lis)])
						end
						end
						local scale = 1
						if(diff == RUN_DIFF_NORMAL) then
						elseif(diff == RUN_DIFF_HARD) then
							scale = 1.5
						elseif(diff == RUN_DIFF_EXPERT) then
							scale = 2.5
						end
						timer.Simple(0, function() --just to be safe
						np:SetHealth(np:Health()*scale)
						end)
						if(!run.enemies) then
							run.enemies = {}
						end
						table.insert(run.enemies, np)
					end
				end
			else
				if(enm == enmcount[#players or #enmcount][2]) then
					break --quit spawning if at max
				end
				--if item count equals or is higher than min
				if(enm >= enmcount[#players or #enmcount][1]) then 
					--random number if itll continue spawning
					--opposite of items
					if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
						break
					end
				end
			
				--spawn at pos
				enm = enm+1
				local np = ents.Create(enmlist[math.random(#enmlist)])
				if(np) then
					np:SetPos(v[1])
					np:SetAngles(v[2])
					local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
					np:SetKeyValue( "spawnflags", SpawnFlags )
					np:Spawn()
					np:Activate() --just in case
					if(np.ComeonSound) then np:ComeonSound() end
					if(list.Get("NPC")[np:GetClass()]) then
					local lis = list.Get("NPC")[np:GetClass()].Weapons
					if(lis) then
					np:Give(lis[math.random(#lis)])
					end
					end
					local scale = 1
					if(diff == RUN_DIFF_NORMAL) then
					elseif(diff == RUN_DIFF_HARD) then
						scale = 1.5
					elseif(diff == RUN_DIFF_EXPERT) then
						scale = 2.5
					end
					timer.Simple(0, function() --just to be safe
					np:SetHealth(np:Health()*scale)
					end)
					if(!run.enemies) then
						run.enemies = {}
					end
					table.insert(run.enemies, np)
				end
			end
			--to break if the table loop broke
			if(breakk) then break end
		end
	end

	--spawn items, put them in items table in run
	if(!disableitems and def.items and #def.items != 0) then
		local itm = 0 --cur item number
		--min/max items based on player count
		local itemcount = {
			[1] = {4,8}, --1 player, 1 min 3 max
			[2] = {6,10},
			[3] = {9,13},
			[4] = {12,16},
			[5] = {15,19},
			[6] = {18,22},
			[7] = {21,25},
			[8] = {24,28},
		}
		--randomize the item spawns
		local tmpitems = shuffle(table.Copy(def.items)) --dont want to fuck up the original

		for k,v in pairs(tmpitems) do
			if(itm == itemcount[#players or #itemcount][2]) then
				break --quit spawning if at max
			end
			--if item count equals or is higher than min
			if(itm >= itemcount[#players or #itemcount][1]) then 
				--random number if itll continue spawning
				--this should make it less of a chance the more items there are already
				if(math.Rand(0,1) < (itm/itemcount[#players or #itemcount][2])) then
					break
				end
			end

			--pick an item out of the table at v[1], and spawn it at v[2]
			--WHEN MAKING TABLES FOR THESE, DONT USE NONE BECAUSE OF THE MIN/MAX ABOVE
			--its unnecessary
			itm = itm+1
			if(!run.items) then
				run.items = {}
			end
			local loottable = v[1]
			if(diff == RUN_DIFF_NORMAL) then
			elseif(diff == RUN_DIFF_HARD) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" and math.random(1,3) != 2) then
					loottable = "tier2"
				end
			elseif(diff == RUN_DIFF_EXPERT) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" or loottable == "tier2" and math.random(1,5) != 3) then
					loottable = "tier3"
				end
			end
			nut.plugin.list["loot"]:SpawnAtPos(loottable, v[2], function(item, entity)
				run.items[k] = entity
					
				--hard overwrite becuz its being annoying
				--its likely never going to be above 1 anyway
				if(item.base == "base_junk") then
					item:setQuantity(1)
				end
				entity.temp = true
			end)
		end
	end
	--create timer that checks every min or something, 
	--send pdapm to all involved players
	--a little bit after last enemy is dead
	--to notify all enemies are dead
	timer.Create("killallthink"..id, 30, 0, function()
		if(PLUGIN.curRuns[id] == nil) then timer.Remove("killallthink"..id) return end

		if(run.failed) then timer.Remove("killallthink"..id) return end

		if(!run.eventnext) then
			run.eventnext = CurTime()+math.random(90, 180) --idk?
		end

		--decide events here
		if(!run.noevents and (run.eventnext and run.eventnext <= CurTime()) and math.random(1,10) == 1) then
			--do a random event
			run.eventnext = CurTime()+math.random(60, 150) --idk?

			local events = {}
			for k,v in pairs(def.events) do
				if(!run.eventlist) then
					run.eventlist = {}
				end
				if((!run.eventlist[k] or run.eventlist[k] <= v.max) and v.valid[run.obj]) then
					--make stuff rarer
					if(v.chance and math.random(1, v.chance) != 1) then continue end
					events[k] = v
				end
			end

			if(#events == 0) then
				run.noevents = true --this def either has no events or no events in this run left available, stop checking
			else
				--pick a random event and run it
				local sel, key = table.Random(events)
				run.eventlist[key] = 1 + (run.eventlist[key] or 0)
				sel.func(id)
			end
		end

		if(run.enemies) then
			local done = true
			for k,v in pairs(run.enemies) do
				if(IsValid(v)) then 
					if(!v:IsInWorld()) then v:Remove() end --remove ents that get spawned in the world, not sure if this will make it return true but ya
					
					done = false 
					break 
				end
			end
			if(done) then --will this work lmao
				print("done message")
				local run = PLUGIN.curRuns[id]
				local players = run.players
				netstream.Start(players, "fakepdapm", "from AUTOREPLY: Your mission has been detected as completed.")
				timer.Remove("killallthink"..id)
			end
		end
	end)
end

local function defaultkillallfinish(id, diff, pricess, givereward)
	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]

	if(!run.enemies) then
		print("weird playerinteract bug")
		return
	end

	--check if theres enemies left in enemies table in run, return true if there is
	for k,v in pairs(run.enemies) do
		if(IsValid(v)) then
			print("mission failed well get em next time")
			return true
		end
	end
	--else, set run.done = true and generate a reward in run.price, {"credid",numberinside}
	run.done = true

	if(!givereward) then return end --no reward by default

	local scale = 1--1
	if(diff == RUN_DIFF_NORMAL) then
	elseif(diff == RUN_DIFF_HARD) then
		scale = 1.2--1.25
	elseif(diff == RUN_DIFF_EXPERT) then
		scale = 1.6--1.75
	end
	--default prices
	pricess = pricess or { --key is number of players
	--note for these: you can give straight normal money if the first part of the table
	--is ""
	[1] = {"cred_n5k", {1200, 1500}},
	[2] = {"cred_n5k", {2400, 3000}},
	[3] = {"cred_n5k", {3600, 4500}},
	[4] = {"cred_n20k", {4800, 6000}},
	}
	run.price = {pricess[run.initialplayers][1], math.random(pricess[run.initialplayers][2][1], pricess[run.initialplayers][2][2])*scale}
end

local function defaultcollecttravel(id, diff, enmcount)
	diff = diff or 1
	
	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]
	local players = run.players
	run.initialplayers = #players --just in case?

	--do a list of spawn locations in the area def and
	--spawn whatevers needed from those
	--set it to obj
	
	local objlist = def.objlist
	if(objlist) then
		print("hello?")
		local objdesc = run.objdef
		local item = nut.item.spawn("run_obj", objlist[2][math.random(#objlist[2])] + Vector(0,0,8), 
		function(item, entity)
			run.objitem = entity
			run.objid = item.id
			if(!run.other) then
				run.other = {}
				table.insert(run.other, entity)
			end
				
			entity.temp = true

		end, Angle(0, math.random(-180, 180), 0), {
			customName = objdesc.name,
			customDesc = objdesc.desc,
			customMdl = objdesc.model
		})
	end

	--spawn enemies, put them in enemies table in run
	local enmlist = run.enemylist
	if(enmlist) then
		local enm = 0 --cur item number
		--min/max items based on player count
		enmcount = enmcount or { --default
			[1] = {3,5}, --1 player, 1 min 3 max
			[2] = {4,6},
			[3] = {6,9},
			[4] = {7,12},
			--adding up to 8
			[5] = {8,15},
			[6] = {10,17},
			[7] = {12,19},
			[8] = {14,24},
		}
		--randomize the item spawns
		local tmpspawns = shuffle(table.Copy(def.enemySpawns))
		local breakk = false
		for k,v in pairs(tmpspawns) do

			--spawn random from enmlist
			if(type(v[1]) == "table") then
				for k2, v2 in pairs(v) do
					if(enm == enmcount[#players or #enmcount][2]) then
						breakk = true --to quit the entire thing
						break --quit spawning if at max
					end
					--if item count equals or is higher than min
					if(enm >= enmcount[#players or #enmcount][1]) then 
						--random number if itll continue spawning
						--opposite of items
						if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
							break
						end
					end
					
			
					--spawn at pos
					enm = enm+1
					local np = ents.Create(enmlist[math.random(#enmlist)])
					if(np) then
						np:SetPos(v2[1])--+Vector(0,0,16))
						np:SetAngles(v2[2]) --mebi this will work idk
						local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
						np:SetKeyValue( "spawnflags", SpawnFlags )
						np:Spawn()
						np:Activate() --just in case
						if(np.ComeonSound) then np:ComeonSound() end
						if(list.Get("NPC")[np:GetClass()]) then
						local lis = list.Get("NPC")[np:GetClass()].Weapons
						if(lis) then
						np:Give(lis[math.random(#lis)])
						end
						end
						local scale = 1
						if(diff == RUN_DIFF_NORMAL) then
						elseif(diff == RUN_DIFF_HARD) then
							scale = 1.5
						elseif(diff == RUN_DIFF_EXPERT) then
							scale = 2.5
						end
						timer.Simple(0, function() --just to be safe
						np:SetHealth(np:Health()*scale)
						end)
						if(!run.enemies) then
							run.enemies = {}
						end
						table.insert(run.enemies, np)
					end
				end
			else
				if(enm == enmcount[#players or #enmcount][2]) then
					break --quit spawning if at max
				end
				--if item count equals or is higher than min
				if(enm >= enmcount[#players or #enmcount][1]) then 
					--random number if itll continue spawning
					--opposite of items
					if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
						break
					end
				end
			
				--spawn at pos
				enm = enm+1
				local np = ents.Create(enmlist[math.random(#enmlist)])
				if(np) then
					np:SetPos(v[1])
					np:SetAngles(v[2])
					local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
					np:SetKeyValue( "spawnflags", SpawnFlags )
					np:Spawn()
					np:Activate() --just in case
					if(np.ComeonSound) then np:ComeonSound() end
					if(list.Get("NPC")[np:GetClass()]) then
					local lis = list.Get("NPC")[np:GetClass()].Weapons
					if(lis) then
					np:Give(lis[math.random(#lis)])
					end
					end
					local scale = 1
					if(diff == RUN_DIFF_NORMAL) then
					elseif(diff == RUN_DIFF_HARD) then
						scale = 1.5
					elseif(diff == RUN_DIFF_EXPERT) then
						scale = 2.5
					end
					timer.Simple(0, function() --just to be safe
					np:SetHealth(np:Health()*scale)
					end)
					if(!run.enemies) then
						run.enemies = {}
					end
					table.insert(run.enemies, np)
				end
			end
			--to break if the table loop broke
			if(breakk) then break end
		end
	end

	--spawn items, put them in items table in run
	if(def.items and #def.items != 0) then
		local itm = 0 --cur item number
		--min/max items based on player count
		local itemcount = {
			[1] = {4,8}, --1 player, 1 min 3 max
			[2] = {6,10},
			[3] = {9,13},
			[4] = {12,16},
			[5] = {15,19},
			[6] = {18,22},
			[7] = {21,25},
			[8] = {24,28},
		}
		--randomize the item spawns
		local tmpitems = shuffle(table.Copy(def.items)) --dont want to fuck up the original

		for k,v in pairs(tmpitems) do
			if(itm == itemcount[#players or #itemcount][2]) then
				break --quit spawning if at max
			end
			--if item count equals or is higher than min
			if(itm >= itemcount[#players or #itemcount][1]) then 
				--random number if itll continue spawning
				--this should make it less of a chance the more items there are already
				if(math.Rand(0,1) < (itm/itemcount[#players or #itemcount][2])) then
					break
				end
			end

			--pick an item out of the table at v[1], and spawn it at v[2]
			--WHEN MAKING TABLES FOR THESE, DONT USE NONE BECAUSE OF THE MIN/MAX ABOVE
			--its unnecessary
			itm = itm+1
			if(!run.items) then
				run.items = {}
			end
			local loottable = v[1]
			if(diff == RUN_DIFF_NORMAL) then
			elseif(diff == RUN_DIFF_HARD) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" and math.random(1,3) != 2) then
					loottable = "tier2"
				end
			elseif(diff == RUN_DIFF_EXPERT) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" or loottable == "tier2" and math.random(1,5) != 3) then
					loottable = "tier3"
				end
			end
			nut.plugin.list["loot"]:SpawnAtPos(loottable, v[2], function(item, entity)
				run.items[k] = entity
					
				--hard overwrite becuz its being annoying
				--its likely never going to be above 1 anyway
				if(item.base == "base_junk") then
					item:setQuantity(1)
				end
				entity.temp = true
			end)
		end
	end
	--create timer that checks every min or something, 
	--send pdapm to all involved players
	--a little bit after last enemy is dead
	--to notify all enemies are dead
	timer.Create("killallthink"..id, 30, 0, function()
		if(PLUGIN.curRuns[id] == nil) then timer.Remove("killallthink"..id) return end

		if(run.failed) then timer.Remove("killallthink"..id) return end

		if(!run.eventnext) then
		run.eventnext = CurTime()+math.random(90, 180) --idk?
		end

		--decide events here
		if(!run.noevents and (run.eventnext and run.eventnext <= CurTime()) and math.random(1,10) == 1) then
			--do a random event
			run.eventnext = CurTime()+math.random(60, 150) --idk?

			local events = {}
			for k,v in pairs(def.events) do
				if(!run.eventlist) then
					run.eventlist = {}
				end
				if((!run.eventlist[k] or run.eventlist[k] <= v.max) and v.valid[run.obj]) then
					--make stuff rarer
					if(v.chance and math.random(1, v.chance) != 1) then continue end
					events[k] = v
				end
			end

			if(#events == 0) then
				run.noevents = true --this def either has no events or no events in this run left available, stop checking
			else
				--pick a random event and run it
				local sel, key = table.Random(events)
				run.eventlist[key] = 1 + (run.eventlist[key] or 0)
				sel.func(id)
			end
		end

		if(run.objitem) then
			local done = IsValid(run.objitem)
			if(!done) then --will this work lmao
				print("done message")
				local run = PLUGIN.curRuns[id]
				local players = run.players
				netstream.Start(players, "fakepdapm", "from AUTOREPLY: Objective no longer detected on ground. If you've picked it up, mission is complete.")
				timer.Remove("killallthink"..id)
			end
		end
	end)
end

local function defaultcollectfinish(id, diff, pricess, givereward)
	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]

	if(!run.objitem or !run.objid) then
		print("weird playerinteract bug")
		return
	end

	--check if theres enemies left in enemies table in run, return true if there is
	if(!run.done and (IsValid(run.objitem) or nut.item.instances[run.objid] == nil)) then
		print("mission failed well get em next time")
		return true
	end
	--else, set run.done = true and generate a reward in run.price, {"credid",numberinside}
	--run.done = true
	--default prices
	if(!givereward) then return end --no reward by default

	local scale = 1--1
	if(diff == RUN_DIFF_NORMAL) then
	elseif(diff == RUN_DIFF_HARD) then
		scale = 1.1--1.25
	elseif(diff == RUN_DIFF_EXPERT) then
		scale = 1.3--1.75
	end
	pricess = pricess or { --key is number of players
	[1] = {"cred_n5k", {1100, 1500}},
	[2] = {"cred_n5k", {2300, 3000}},
	[3] = {"cred_n5k", {3500, 4500}},
	[4] = {"cred_n20k", {4700, 6000}},
	}
	run.price = {pricess[run.initialplayers][1], math.random(pricess[run.initialplayers][2][1], pricess[run.initialplayers][2][2])*scale}
end

local function defaulttargettravel(id, diff, enmcount)
	diff = diff or 1
	
	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]
	local players = run.players
	run.initialplayers = #players --just in case?

	--do a list of spawn locations in the area def and
	--spawn whatevers needed from those
	--set it to obj
	local tmpspawns = shuffle(table.Copy(def.enemySpawns)) --set it here so we can get it for target
	local spawnkey = math.random(#tmpspawns)
	local spawn = tmpspawns[spawnkey]
	table.remove(tmpspawns, spawnkey)

	local objlist = run.objdef
	if(objlist) then
		local realspawn = spawn[1]
		local realangle = spawn[2]
		if(type(spawn[1]) == "table") then
			print("wtf")
			PrintTable(spawn[1])
			realspawn = spawn[math.random(#spawn)][1] --again haha
			realangle = spawn[math.random(#spawn)][2]
		end

		local objtype
		if(!objlist.entclass) then
			if(string.find(run.enemylist[1], "sec_")) then
				if(objlist.class == "grenadier") then
					objtype = "npc_vj_sec_gren"
				elseif(objlist.class == "medic") then
					objtype = "npc_vj_sec_medic"
				elseif(objlist.class == "assault trooper") then
					objtype = "npc_vj_sec_cqb"
				end
			elseif(string.find(run.enemylist[1], "saitama_")) then
				if(objlist.class == "grenadier") then
					objtype = "npc_vj_saitama_swat_gren"
				elseif(objlist.class == "medic") then
					objtype = "npc_vj_saitama_swat_medic"
				elseif(objlist.class == "assault trooper") then
					objtype = "npc_vj_saitama_swat"
				end
			end
		else
			objtype = objlist.entclass
		end

		if(objtype) then
		local np = ents.Create(objtype)
		if(np) then
			np:SetPos(realspawn)--spawn[1])--+Vector(0,0,16))
			np:SetAngles(realangle) --mebi this will work idk
			local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
			np:SetKeyValue( "spawnflags", SpawnFlags )
			np:Spawn()
			np:Activate() --just in case
			if(!objlist.model) then
				if(string.find(run.enemylist[1], "sec_")) then
					np:SetModel(objlist.gender == "male" and "models/sky/npcs/male_08.mdl" or "models/sky/npcs/female_08.mdl") --will this work?	
				elseif(string.find(run.enemylist[1], "saitama_")) then
					np:SetModel(objlist.gender == "male" and "models/sky/male_saitama_npc.mdl" or "models/sky/female_saitama_npc.mdl") --will this work?	
				end
			else
				np:SetModel(objlist.model)
			end
			if(np.CheckFemale) then
				np:CheckFemale()
			end
			if(np.ComeonSound) then np:ComeonSound() end
			np:SetNWBool("targetmarked", true) --hope this will work lmao
			if(list.Get("NPC")[np:GetClass()]) then
			local lis = list.Get("NPC")[np:GetClass()].Weapons
			if(lis) then
			np:Give(lis[math.random(#lis)])
			end
			end
			local scale = 1
			if(diff == RUN_DIFF_NORMAL) then
			elseif(diff == RUN_DIFF_HARD) then
				scale = 1.5
			elseif(diff == RUN_DIFF_EXPERT) then
				scale = 2.5
			end
			timer.Simple(0, function() --just to be safe
			np:SetHealth(np:Health()*scale)
			end)
			np:CallOnRemove("spawnreinforcements", function(ent)
				--print("test")
				if(math.random(1,5) != 1) then --80% chance
					timer.Simple(math.random(3,7), function()
					def.events[objlist.reinfobj or 1].func(id) --1 should always be reinforcements
					end)
				end
			end)
			run.objitem = np

			if(!run.enemies) then
				run.enemies = {}
			end
			table.insert(run.enemies, np)
		end
		end
	end

	--spawn enemies, put them in enemies table in run
	local enmlist = run.enemylist
	if(enmlist) then
		local enm = 0 --cur item number
		--min/max items based on player count
		enmcount = enmcount or { --default
			[1] = {3,5}, --1 player, 1 min 3 max
			[2] = {4,6},
			[3] = {6,9},
			[4] = {7,12},
			--adding up to 8
			[5] = {8,15},
			[6] = {10,17},
			[7] = {12,19},
			[8] = {14,24},
		}
		--randomize the item spawns
		local breakk = false
		for k,v in pairs(tmpspawns) do

			--spawn random from enmlist
			if(type(v[1]) == "table") then
				for k2, v2 in pairs(v) do
					if(enm == enmcount[#players or #enmcount][2]) then
						breakk = true --to quit the entire thing
						break --quit spawning if at max
					end
					--if item count equals or is higher than min
					if(enm >= enmcount[#players or #enmcount][1]) then 
						--random number if itll continue spawning
						--opposite of items
						if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
							break
						end
					end
					
			
					--spawn at pos
					enm = enm+1
					local np = ents.Create(enmlist[math.random(#enmlist)])
					if(np) then
						np:SetPos(v2[1])--+Vector(0,0,16))
						np:SetAngles(v2[2]) --mebi this will work idk
						local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
						np:SetKeyValue( "spawnflags", SpawnFlags )
						np:Spawn()
						np:Activate() --just in case
						if(np.ComeonSound) then np:ComeonSound() end
						if(list.Get("NPC")[np:GetClass()]) then
						local lis = list.Get("NPC")[np:GetClass()].Weapons
						if(lis) then
						np:Give(lis[math.random(#lis)])
						end
						end
						local scale = 1
						if(diff == RUN_DIFF_NORMAL) then
						elseif(diff == RUN_DIFF_HARD) then
							scale = 1.5
						elseif(diff == RUN_DIFF_EXPERT) then
							scale = 2.5
						end
						timer.Simple(0, function() --just to be safe
						np:SetHealth(np:Health()*scale)
						end)
						if(!run.enemies) then
							run.enemies = {}
						end
						table.insert(run.enemies, np)
					end
				end
			else
				if(enm == enmcount[#players or #enmcount][2]) then
					break --quit spawning if at max
				end
				--if item count equals or is higher than min
				if(enm >= enmcount[#players or #enmcount][1]) then 
					--random number if itll continue spawning
					--opposite of items
					if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
						break
					end
				end
			
				--spawn at pos
				enm = enm+1
				local np = ents.Create(enmlist[math.random(#enmlist)])
				if(np) then
					np:SetPos(v[1])
					np:SetAngles(v[2])
					local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
					np:SetKeyValue( "spawnflags", SpawnFlags )
					np:Spawn()
					np:Activate() --just in case
					if(np.ComeonSound) then np:ComeonSound() end
					if(list.Get("NPC")[np:GetClass()]) then
					local lis = list.Get("NPC")[np:GetClass()].Weapons
					if(lis) then
					np:Give(lis[math.random(#lis)])
					end
					end
					local scale = 1
					if(diff == RUN_DIFF_NORMAL) then
					elseif(diff == RUN_DIFF_HARD) then
						scale = 1.5
					elseif(diff == RUN_DIFF_EXPERT) then
						scale = 2.5
					end
					timer.Simple(0, function() --just to be safe
					np:SetHealth(np:Health()*scale)
					end)
					if(!run.enemies) then
						run.enemies = {}
					end
					table.insert(run.enemies, np)
				end
			end
			--to break if the table loop broke
			if(breakk) then break end
		end
	end

	--spawn items, put them in items table in run
	if(def.items and #def.items != 0) then
		local itm = 0 --cur item number
		--min/max items based on player count
		local itemcount = {
			[1] = {4,8}, --1 player, 1 min 3 max
			[2] = {6,10},
			[3] = {9,13},
			[4] = {12,16},
			[5] = {15,19},
			[6] = {18,22},
			[7] = {21,25},
			[8] = {24,28},
		}
		--randomize the item spawns
		local tmpitems = shuffle(table.Copy(def.items)) --dont want to fuck up the original

		for k,v in pairs(tmpitems) do
			if(itm == itemcount[#players or #itemcount][2]) then
				break --quit spawning if at max
			end
			--if item count equals or is higher than min
			if(itm >= itemcount[#players or #itemcount][1]) then 
				--random number if itll continue spawning
				--this should make it less of a chance the more items there are already
				if(math.Rand(0,1) < (itm/itemcount[#players or #itemcount][2])) then
					break
				end
			end

			--pick an item out of the table at v[1], and spawn it at v[2]
			--WHEN MAKING TABLES FOR THESE, DONT USE NONE BECAUSE OF THE MIN/MAX ABOVE
			--its unnecessary
			itm = itm+1
			if(!run.items) then
				run.items = {}
			end
			local loottable = v[1]
			if(diff == RUN_DIFF_NORMAL) then
			elseif(diff == RUN_DIFF_HARD) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" and math.random(1,3) != 2) then
					loottable = "tier2"
				end
			elseif(diff == RUN_DIFF_EXPERT) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" or loottable == "tier2" and math.random(1,5) != 3) then
					loottable = "tier3"
				end
			end
			nut.plugin.list["loot"]:SpawnAtPos(loottable, v[2], function(item, entity)
				run.items[k] = entity
					
				--hard overwrite becuz its being annoying
				--its likely never going to be above 1 anyway
				if(item.base == "base_junk") then
					item:setQuantity(1)
				end
				entity.temp = true
			end)
		end
	end
	--create timer that checks every min or something, 
	--send pdapm to all involved players
	--a little bit after last enemy is dead
	--to notify all enemies are dead
	timer.Create("killallthink"..id, 30, 0, function()
		if(PLUGIN.curRuns[id] == nil) then timer.Remove("killallthink"..id) return end

		if(run.failed) then timer.Remove("killallthink"..id) return end

		if(!run.eventnext) then
		run.eventnext = CurTime()+math.random(90, 180) --idk?
		end

		--decide events here
		if(!run.noevents and (run.eventnext and run.eventnext <= CurTime()) and math.random(1,10) == 1) then
			--do a random event
			run.eventnext = CurTime()+math.random(60, 150) --idk?

			local events = {}
			for k,v in pairs(def.events) do
				if(!run.eventlist) then
					run.eventlist = {}
				end
				if((!run.eventlist[k] or run.eventlist[k] <= v.max) and v.valid[run.obj]) then
					--make stuff rarer
					if(v.chance and math.random(1, v.chance) != 1) then continue end
					events[k] = v
				end
			end

			if(#events == 0) then
				run.noevents = true --this def either has no events or no events in this run left available, stop checking
			else
				--pick a random event and run it
				local sel, key = table.Random(events)
				run.eventlist[key] = 1 + (run.eventlist[key] or 0)
				sel.func(id)
			end
		end

		if(run.objitem) then
			local done = IsValid(run.objitem)
			if(!done) then --will this work lmao
				print("done message")
				local run = PLUGIN.curRuns[id]
				local players = run.players
				netstream.Start(players, "fakepdapm", "from AUTOREPLY: It appears the target has been eliminated. Mission complete.")
				timer.Remove("killallthink"..id)
			end
		end
	end)
end

local function defaulttargetfinish(id, diff, pricess, givereward)
	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]

	if(!run.objitem) then
		print("weird playerinteract bug")
		return
	end

	--check if theres enemies left in enemies table in run, return true if there is
	if(IsValid(run.objitem)) then
		print("mission failed well get em next time")
		return true
	end
	--else, set run.done = true and generate a reward in run.price, {"credid",numberinside}
	run.done = true
	if(!givereward) then return end --no reward by default
	--default prices
	local scale = 1--1
	if(diff == RUN_DIFF_NORMAL) then
	elseif(diff == RUN_DIFF_HARD) then
		scale = 1.1--1.25
	elseif(diff == RUN_DIFF_EXPERT) then
		scale = 1.3--1.75
	end
	pricess = pricess or { --key is number of players
	[1] = {"cred_n5k", {1400, 1700}},
	[2] = {"cred_n5k", {2800, 3400}},
	[3] = {"cred_n20k", {4200, 5100}},
	[4] = {"cred_n20k", {5600, 6800}},
	}
	run.price = {pricess[run.initialplayers][1], math.random(pricess[run.initialplayers][2][1], pricess[run.initialplayers][2][2])*scale}
end

local function defaultwavetravel(id, diff, enmcount)
	diff = diff or 1
	
	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]
	local players = run.players
	run.initialplayers = #players --just in case?

	--do a list of spawn locations in the area def and
	--spawn whatevers needed from those
	--set it to obj
	local tmpspawns = shuffle(table.Copy(def.enemySpawns)) --set it here so we can get it for target
	local spawnkey = math.random(#def.waveSpawns)
	local spawn = def.waveSpawns[spawnkey]

		local np = ents.Create("run_wave")
		if(np) then
			np:SetPos(spawn[1])--spawn[1])--+Vector(0,0,16))
			np:SetAngles(spawn[2]) --mebi this will work idk
			np:Spawn()
			np:Activate() --just in case
			np.runid = id
			run.objitem = np

			if(IsValid(np:GetPhysicsObject())) then
				np:GetPhysicsObject():EnableMotion(false)
			end

			if(!run.other) then
				run.other = {}
			end
			table.insert(run.other, np)
		end

	--spawn enemies, put them in enemies table in run
	local enmlist = run.enemylist
	if(enmlist) then
		local enm = 0 --cur item number
		--min/max items based on player count
		enmcount = enmcount or { --default
			[1] = {3,5}, --1 player, 1 min 3 max
			[2] = {4,7},
			[3] = {6,9},
			[4] = {7,12},
			--adding up to 8
			[5] = {8,15},
			[6] = {10,17},
			[7] = {12,19},
			[8] = {14,24},
		}
		--randomize the item spawns
		local breakk = false
		for k,v in pairs(tmpspawns) do

			--spawn random from enmlist
			if(type(v[1]) == "table") then
				for k2, v2 in pairs(v) do
					if(enm == enmcount[#players or #enmcount][2]) then
						breakk = true --to quit the entire thing
						break --quit spawning if at max
					end
					--if item count equals or is higher than min
					if(enm >= enmcount[#players or #enmcount][1]) then 
						--random number if itll continue spawning
						--opposite of items
						if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
							break
						end
					end
					
			
					--spawn at pos
					enm = enm+1
					local np = ents.Create(enmlist[math.random(#enmlist)])
					if(np) then
						np:SetPos(v2[1])--+Vector(0,0,16))
						np:SetAngles(v2[2]) --mebi this will work idk
						local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
						np:SetKeyValue( "spawnflags", SpawnFlags )
						np:Spawn()
						np:Activate() --just in case
						if(np.ComeonSound) then np:ComeonSound() end
						if(list.Get("NPC")[np:GetClass()]) then
						local lis = list.Get("NPC")[np:GetClass()].Weapons
						if(lis) then
						np:Give(lis[math.random(#lis)])
						end
						end
						local scale = 1
						if(diff == RUN_DIFF_NORMAL) then
						elseif(diff == RUN_DIFF_HARD) then
							scale = 1.5
						elseif(diff == RUN_DIFF_EXPERT) then
							scale = 2.5
						end
						timer.Simple(0, function() --just to be safe
						np:SetHealth(np:Health()*scale)
						end)
						if(!run.enemies) then
							run.enemies = {}
						end
						table.insert(run.enemies, np)
					end
				end
			else
				if(enm == enmcount[#players or #enmcount][2]) then
					break --quit spawning if at max
				end
				--if item count equals or is higher than min
				if(enm >= enmcount[#players or #enmcount][1]) then 
					--random number if itll continue spawning
					--opposite of items
					if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
						break
					end
				end
			
				--spawn at pos
				enm = enm+1
				local np = ents.Create(enmlist[math.random(#enmlist)])
				if(np) then
					np:SetPos(v[1])
					np:SetAngles(v[2])
					local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
					np:SetKeyValue( "spawnflags", SpawnFlags )
					np:Spawn()
					np:Activate() --just in case
					if(np.ComeonSound) then np:ComeonSound() end
					if(list.Get("NPC")[np:GetClass()]) then
					local lis = list.Get("NPC")[np:GetClass()].Weapons
					if(lis) then
					np:Give(lis[math.random(#lis)])
					end
					end
					local scale = 1
					if(diff == RUN_DIFF_NORMAL) then
					elseif(diff == RUN_DIFF_HARD) then
						scale = 1.5
					elseif(diff == RUN_DIFF_EXPERT) then
						scale = 2.5
					end
					timer.Simple(0, function() --just to be safe
					np:SetHealth(np:Health()*scale)
					end)
					if(!run.enemies) then
						run.enemies = {}
					end
					table.insert(run.enemies, np)
				end
			end
			--to break if the table loop broke
			if(breakk) then break end
		end
	end

	--spawn items, put them in items table in run
	if(def.items and #def.items != 0) then
		local itm = 0 --cur item number
		--min/max items based on player count
		local itemcount = {
			[1] = {4,8}, --1 player, 1 min 3 max
			[2] = {6,10},
			[3] = {9,13},
			[4] = {12,16},
			[5] = {15,19},
			[6] = {18,22},
			[7] = {21,25},
			[8] = {24,28},
		}
		--randomize the item spawns
		local tmpitems = shuffle(table.Copy(def.items)) --dont want to fuck up the original

		for k,v in pairs(tmpitems) do
			if(itm == itemcount[#players or #itemcount][2]) then
				break --quit spawning if at max
			end
			--if item count equals or is higher than min
			if(itm >= itemcount[#players or #itemcount][1]) then 
				--random number if itll continue spawning
				--this should make it less of a chance the more items there are already
				if(math.Rand(0,1) < (itm/itemcount[#players or #itemcount][2])) then
					break
				end
			end

			--pick an item out of the table at v[1], and spawn it at v[2]
			--WHEN MAKING TABLES FOR THESE, DONT USE NONE BECAUSE OF THE MIN/MAX ABOVE
			--its unnecessary
			itm = itm+1
			if(!run.items) then
				run.items = {}
			end
			local loottable = v[1]
			if(diff == RUN_DIFF_NORMAL) then
			elseif(diff == RUN_DIFF_HARD) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" and math.random(1,3) != 2) then
					loottable = "tier2"
				end
			elseif(diff == RUN_DIFF_EXPERT) then
				if(loottable == "trashrun") then
					loottable = "trashrunrare"
				elseif(loottable == "trashrunrare") then
					loottable = "tier1"
				elseif(loottable == "tier1" or loottable == "tier2" and math.random(1,5) != 3) then
					loottable = "tier3"
				end
			end
			nut.plugin.list["loot"]:SpawnAtPos(loottable, v[2], function(item, entity)
				run.items[k] = entity
					
				--hard overwrite becuz its being annoying
				--its likely never going to be above 1 anyway
				if(item.base == "base_junk") then
					item:setQuantity(1)
				end
				entity.temp = true
			end)
		end
	end
	--create timer that checks every min or something, 
	--send pdapm to all involved players
	--a little bit after last enemy is dead
	--to notify all enemies are dead
	timer.Create("killallthink"..id, 30, 0, function()
		if(PLUGIN.curRuns[id] == nil) then timer.Remove("killallthink"..id) return end

		if(run.failed) then timer.Remove("killallthink"..id) return end

		if(!run.eventnext) then
		run.eventnext = CurTime()+math.random(90, 180) --idk?
		end

		--decide events here
		if(!run.noevents and (run.eventnext and run.eventnext <= CurTime()) and math.random(1,10) == 1) then
			--do a random event
			run.eventnext = CurTime()+math.random(60, 150) --idk?

			local events = {}
			for k,v in pairs(def.events) do
				if(!run.eventlist) then
					run.eventlist = {}
				end
				if((!run.eventlist[k] or run.eventlist[k] <= v.max) and v.valid[run.obj]) then
					--make stuff rarer
					if(v.chance and math.random(1, v.chance) != 1) then continue end
					events[k] = v
				end
			end

			if(#events == 0) then
				run.noevents = true --this def either has no events or no events in this run left available, stop checking
			else
				--pick a random event and run it
				local sel, key = table.Random(events)
				run.eventlist[key] = 1 + (run.eventlist[key] or 0)
				sel.func(id)
			end
		end

		if(run.objitem) then
			local done = !IsValid(run.objitem) or run.objitem.destroyed or run.objitem.finished
			if(done) then --will this work lmao
				print("done message")
				--the wave machine notifies them
				--netstream.Start(players, "fakepdapm", "from AUTOREPLY: It appears the target has been eliminated. Mission complete.")
				timer.Remove("killallthink"..id)
			end
		end
	end)
end

local function defaultwavefinish(id, diff, pricess, givereward)
	local run = PLUGIN.curRuns[id]
	if(!run) then return end --why is it even running now?
	local def = PLUGIN.areas[run.area]

	if(!run.objitem) then
		print("weird playerinteract bug")
		return
	end

	--check if theres enemies left in enemies table in run, return true if there is
	if(!IsValid(run.objitem) or run.objitem.destroyed or !run.objitem.finished) then
		print("mission failed well get em next time")
		return true
	end
	--else, set run.done = true and generate a reward in run.price, {"credid",numberinside}
	run.done = true
	if(!givereward) then return end --no reward by default
	--default prices
	local scale = 1--1
	if(diff == RUN_DIFF_NORMAL) then
	elseif(diff == RUN_DIFF_HARD) then
		scale = 1.1--1.25
	elseif(diff == RUN_DIFF_EXPERT) then
		scale = 1.3--1.75
	end
	pricess = pricess or { --key is number of players
	[1] = {"cred_n5k", {1100, 1400}},
	[2] = {"cred_n5k", {2200, 2800}},
	[3] = {"cred_n5k", {3300, 4200}},
	[4] = {"cred_n20k", {4400, 5600}},
	}
	run.price = {pricess[run.initialplayers][1], math.random(pricess[run.initialplayers][2][1], pricess[run.initialplayers][2][2])*scale}
end

local function addEnt(v, tbl)
	
	local b = ents.Create(v.class)
	if(b) then
		if(v.model) then
			b:SetModel(v.model)
		end
		if(v.skin) then
			b:SetSkin(v.skin)
		end
		if(v.randomskin) then
			b:SetSkin(math.random(b:SkinCount()))
		end
		b:SetPos(v.pos)
		b:SetAngles(v.angle)
		b:Spawn()
		b:Activate()
		--[[if(!run.other) then
			run.other = {}
		end]]
		if(!v.motion and b:GetPhysicsObject()) then
			b:GetPhysicsObject():EnableMotion(false)
		end

		if(v.sound) then
			b:EmitSound(v.sound)
			b:CallOnRemove("removesound", function(ent)
				ent:StopSound(v.sound)
			end)
		end
		if(v.color) then
			b:SetRenderMode(RENDERMODE_TRANSALPHA)
			b:SetColor(v.color)
		end
		table.insert(tbl, b)
	end
end

local function propInit(run, def)
	local enm = 0 --cur item number
	local rand = shuffle(table.Copy(def.serverlist))
	
	for k,v in pairs(rand) do
		if(!v.always and (string.find(v.class, "hack_") and enm == 2) or math.random(1, 10) > 3) then
			continue
		end

		local b = ents.Create(v.class)
		if(b) then
			if(string.find(v.class, "hack_")) then
			enm = enm + 1
			end
			if(v.model) then
				b:SetModel(v.model)
			end
			if(v.skin) then
				b:SetSkin(v.skin)
			end
			if(v.randomskin) then
				b:SetSkin(math.random(b:SkinCount()))
			end
			b:SetPos(v.pos)
			b:SetAngles(v.angle)
			b:Spawn()
			b:Activate()
			if(!run.other) then
				run.other = {}
			end
			if(!v.motion and IsValid(b:GetPhysicsObject())) then
				b:GetPhysicsObject():EnableMotion(false)
			end

			if(v.sound) then
				b:EmitSound(v.sound)
				b:CallOnRemove("removesound", function(ent)
					ent:StopSound(v.sound)
				end)
			end
			if(v.color) then
				b:SetRenderMode(RENDERMODE_TRANSALPHA)
				b:SetColor(v.color)
			end
			if(v.other) then
				for k2,v2 in pairs(v.other) do
					addEnt(v2, run.other)
				end
			end
			table.insert(run.other, b)
		end
	end

end

local function defaultreinforcements(run, def, diff, overwritespawns)
	local enm = 0 --cur item number
	--min/max items based on player count
	local enmcount = {
		[1] = {1,2}, --1 player, 1 min 3 max
		[2] = {1,3},
		[3] = {2,4},
		[4] = {4,4},
		[5] = {4,5}, --if it can support these extra players there should be spawns for them
		[6] = {5,6},
		[7] = {6,7},
		[8] = {8,8},
	}
	local players = run.players

	--randomize the item spawns
	local tmpspawns = shuffle(overwritespawns or table.Copy(def.playerspawns))
	local enmlist = run.enemylist
	
	local breakk = false
	for k,v in pairs(tmpspawns) do

		--spawn random from enmlist
		if(type(v[1]) == "table") then
			for k2, v2 in pairs(v) do
				if(enm == enmcount[#players or #enmcount][2]) then
					breakk = true --to quit the entire thing
					break --quit spawning if at max
				end
				--if item count equals or is higher than min
				if(enm >= enmcount[#players or #enmcount][1]) then 
					--random number if itll continue spawning
					--opposite of items
					if(math.Rand(0,1) >= (enm/enmcount[#players or #enmcount][2])) then
						break
					end
				end
	

				--spawn at pos
				enm = enm+1
				local np = ents.Create(enmlist[math.random(#enmlist)])
				if(np) then
					np:SetPos(v2[1])
					np:SetAngles(Angle(0, v2[2].y, 0))
					local SpawnFlags = bit.bor( SF_NPC_FADE_CORPSE, SF_NPC_ALWAYSTHINK, SF_NPC_NO_WEAPON_DROP )
					np:SetKeyValue( "spawnflags", SpawnFlags )
					np:Spawn()
					np:Activate() --just in case
					if(np.ComeonSound) then np:ComeonSound() end
					if(list.Get("NPC")[np:GetClass()]) then
						local lis = list.Get("NPC")[np:GetClass()].Weapons
						if(lis) then
							np:Give(lis[math.random(#lis)])
						end
					end
					local scale = 1
					if(diff == RUN_DIFF_NORMAL) then
					elseif(diff == RUN_DIFF_HARD) then
						scale = 1.5
					elseif(diff == RUN_DIFF_EXPERT) then
						scale = 2.5
					end
					timer.Simple(0, function() --just to be safe
					np:SetHealth(np:Health()*scale)
					end)
					if(!run.enemies) then
						run.enemies = {}
					end
					table.insert(run.enemies, np)

					local unlucky = players[math.random(#players)]
					local triesd = 0
					while(!IsValid(unlucky) and triesd <= 5) do --just in case theres someone invalid in there
						triesd = triesd+1 --so its not infinitely trying if theres no players for whatever reason
						unlucky = players[math.random(#players)]
					end
					if(!IsValid(unlucky)) then
						nut.log.addRaw("tried to add reinforcements for "..run.uniqueid.." but theres no players???")
						continue
					end

					--make them move onto the map by going to a random players position, 
					--theres a complete chance that they wont meet anyone during that time but whatever
					np:StopMoving()
					np:SetLastPosition(unlucky:GetPos())
					if np.IsVJBaseSNPC == true && (np.IsVJBaseSNPC_Creature == true or np.IsVJBaseSNPC_Human == true) then
						np:VJ_TASK_GOTO_LASTPOS("TASK_RUN_PATH",function(x) 
							if IsValid(np:GetEnemy()) && np:Visible(v:GetEnemy()) then
								x:EngTask("TASK_FACE_ENEMY", 0) 
								x.CanShootWhenMoving = true 
								x.ConstantlyFaceEnemy = true
							end
						end)
					else
						np:SetSchedule(SCHED_FORCED_GO_RUN)
					end
				end
			end
		end
	end
	if(players == nil) then return end
	if(run.obj == 5) then
		--local run = PLUGIN.curRuns[id]
		--local players = run.players
		netstream.Start(players, "fakepdapm", "from AUTOREPLY: SectCom forces reported nearby.")
	else
		--local run = PLUGIN.curRuns[id]
		--local players = run.players
		netstream.Start(players, "fakepdapm", "from AUTOREPLY: Reinforcements reported nearby.")
	end
end

--newclasses should be the same structure, ex {"display name", "ent class"}
--modeltbl structure: {"female model", "male model"}
--newreinfevent can be used to specify a different event type in the def to use
local function defaulttargetsetup(run, newclasses, modeltbl, newreinfevent)
	
	local targ = {}
	targ.gender = math.random(1,2) == 1 and "male" or "female"
	local classes = newclasses or {{"helix unit", "npc_vj_sky_mp_helix"},{"storm unit", "npc_vj_sky_mp_storm"}}
	local cla = classes[math.random(#classes)]
	targ.class = cla[1]
	targ.entclass = cla[2]
	--default is mp, if i want to do something else use newclasses
	--if(targ.class:find("_mp")) then 
		if(targ.gender == "female") then
			targ.model = modeltbl and modeltbl[1] or "models/sky/npcs/female_metropolice.mdl"
		else
			targ.model = modeltbl and modeltbl[2] or "models/sky/npcs/male_metropolice.mdl"
		end
	--end
	if(newreinfevent) then
		run.reinfobj = newreinfevent
	end

	--ensure the enemy list is cp only
	if(!newclasses) then
		if(table.KeyFromValue(run.enemylist, "npc_vj_sky_citizen") 
			or table.KeyFromValue(run.enemylist, "npc_vj_sky_rebel")) then
				
				--just default it to this
			run.enemylist = {"npc_vj_sky_mp"}
		end
	end

	run.objdef = targ

	local msg = "Your target is a "..targ.gender.." "..targ.class..". If you have HUD cyberware, they will be painted in a color. Reinforcements highly likely on target's death." --????how???
	timer.Simple(0, function()
		netstream.Start(run.players, "fakepdapm", "from AUTOREPLY: "..msg)
	end)
end


--list of possible areas
PLUGIN.areas = {
--[[
	table structure:
	[id] = {
		name = function() to display name of area,
		objectives = table of objectives:
		[id] = {
			name = function() to display name of objective,
			desc = function() to use as run desc
			onAccept = function(id) --id being the id of the run in curRuns, ran on accepted,
			onTravel = function(id) --id being the id of the run in curRuns, ran on travelled,
			onFinish = function(id) --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
			special = if true wont be generated randomly, for storyline
			manualspawn = if true you have to teleport them in travel, it wont pick a random playerspawn and do it automatically
		},
		enemies = table of tables of possible enemies at once, {"npc_vj_saitama"} etc,
		enemySpawns = table of enemy spawns, either
		{vector, ang} or {{vector, ang},{vector, ang}} 
		first for singular, second for groups spawned together,
		items = table of item spawns, 
		either a string to use a table from loot plugin, 
		or a table of loot spawns, ex:
		{"basic", vectorofspawn},
		events = table of events that could happen:
		[id] = {
			name = name of event,
			valid = optional field, only valid during objective ids listed,
			func = function(id) --id being the id of the run in curRuns, function ran when event is picked,
			max = amount of times this event can be chosen per run,
		},
		playerspawns = table of tables of vectors/angs to spawn players at,
		center = center position, to check in sphere for entities,
		centerrange = the radius of that sphere,
		maxply = max number of players
	},
]]
	/*
	[0] = {
		name = function() return "template" end,
		objectives = {
			[1] = {
				name = function() return "Kill All" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override) 
				end,
				]]
				onTravel = defaultkillalltravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultkillallfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[2] = {
				name = function() return "Collect Item" end,
				desc = function() return "collect a particular item, details will be sent via pm on accept. when you get back with the item, turn the objective into the red drop box to complete the run. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]
					
					
					local targ = def.objlist[1][math.random(#def.objlist[1])]

					run.objdef = targ

					local msg = "The item you are looking for is a "..targ.name.."."
					timer.Simple(0, function()
					netstream.Start(run.players, "fakepdapm", "from AUTOREPLY: "..msg)
					end)

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultcollecttravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultcollectfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[3] = {
				name = function() return "Kill Target" end,
				desc = function() return "kill a specific target in the area, details will be forwarded via autoreply on acceptance. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					defaulttargetsetup(run)

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaulttargettravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaulttargetfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			--[[ --there are currently none setup for this
			[4] = {
				name = function() return "Defend Machine" end,
				desc = function() return "find, activate, and defend a machine. mission is complete when its finished running. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultwavetravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultwavefinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			]]
		},
		waveSpawns = { --idk if ill do waves yet but might as well do them
			--[[
				{vector, angle},
			]]

		},
		serverlist = { --props with chance to spawn
			--[[
			{
				class = "prop_physics", --class
				model = "models/props_junk/wood_crate002a.mdl", --model
				randomskin = true, --if true then random skin, otherwise comment and use
				--skin = 0,
				pos = Vector(8167.5, 8756.5, 608.46875), --pos to spawn at
				angle = Angle(-0.1318359375, 12.392578125, -0.087890625), --angle to spawn at
				--motion = true, --if true, starts unfrozen
				other = { --these will guarantee spawn with this
					{
						class = "prop_physics",
						model = "models/props_junk/wood_crate001a_damaged.mdl",
						randomskin = true,
						pos = Vector(8172.65625, 8774.96875, 648.75),
						angle = Angle(-0.0439453125, -13.53515625, 0),
						motion = true,
					},
				}
			},
			]]
		},
		enemies = { --table of tables of enemies
			--[[
				{"npc class",},
			]]
			{"npc_vj_sky_mp"}, --temp

		},
		objlist = { --collect item objs
			{ --objs
				--[[
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				]]
				--default example ones
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				{
					name = "Small Cache",
					desc = "A small plastic green container with 'GEOSTASH' on it. Quick check inside reveals that there's actually nothing in it.",
					model = "models/props_clutter/geo_cache_001.mdl",
				},
				{
					name = "Dossier",
					desc = "A dossier of some kind.",
					model = "models/stalker/item/handhelds/files4.mdl",
				},
				{
					name = "Journal",
					desc = "A journal of some kind.",
					model = "models/props_lab/bindergraylabel01a.mdl",
				},
			},
			{ --spawn positions
				--vectors
			}
		},
		enemySpawns = { --possible enemy spawns
			--{vector, angle} or tables of these to spawn them all at once

		},
		items = { --loot spawn list
			--{"loottableid", vector},

		},
		events = { --rng events
			[1] = {
				name = "reinforcements", --name of event,
				valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
				func = function(id)
					local run = PLUGIN.curRuns[id]
					local diff = run.diff or 0
					local def = PLUGIN.areas[run.area]
					local players = run.players

					if(!players or #players == 0) then return end

					defaultreinforcements(run, def, diff)
				end, --id being the id of the run in curRuns, function ran when event is picked,
				max = 1, --amount of times this event can be chosen per run,
			},--]]
			[2] = {
			name = "nothing", --name of event,
			valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
			func = function(id)
			--	local run = PLUGIN.curRuns[id]

			end, --id being the id of the run in curRuns, function ran when event is picked,
			max = 4, --amount of times this event can be chosen per run,
			},

		},
		playerspawns = { --tables of tables of player spawns
			--[[
			{ --table of vector3 angle tables
				{Vector(-10524.9375, 3544.4104003906, -51.286354064941), Angle(0, -91.348686218262, 0)},
				{Vector(-10518.794921875, 3462.2673339844, -51.286354064941), Angle(0, -90.545623779297, 0)},
				{Vector(-10598.436523438, 3464.2336425781, -51.286354064941), Angle(0, -87.81534576416, 0)},
				{Vector(-10601.862304688, 3554.0349121094, -51.286354064941), Angle(0, -87.81534576416, 0)},
			},
			]]
		},
		center = Vector(-11487.037109, 2725.886230, -53.667160),--the general center of the area
		centerrange = 1500, --the general length to encapsulate the entire area into a circle
		maxply = 4, --max player count, default values support up to 8 (minus the money giving, thatll error unless u specify a new table or change the default 1 or something else)
	},
	*/


	[1] = {
		name = function() return "Abandoned Hospital" end,
		objectives = {
			[1] = {
				name = function() return "Kill All" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultkillalltravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultkillallfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[2] = {
				name = function() return "Collect Item" end,
				desc = function() return "collect a particular item, details will be sent via pm on accept. when you get back with the item, turn the objective into the red drop box to complete the run. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]
					
					
					local targ = def.objlist[1][math.random(#def.objlist[1])]

					run.objdef = targ

					local msg = "The item you are looking for is a "..targ.name.."."
					timer.Simple(0, function()
					netstream.Start(run.players, "fakepdapm", "from AUTOREPLY: "..msg)
					end)

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultcollecttravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultcollectfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[3] = {
				name = function() return "Kill Target" end,
				desc = function() return "kill a specific target in the area, details will be forwarded via autoreply on acceptance. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					defaulttargetsetup(run)

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaulttargettravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaulttargetfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[4] = {
				name = function() return "Kill All (VR)" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override, disable item spawning) 
				end,
				]]
				onTravel = function(run, diff)
					defaultkillalltravel(run, diff, nil, {"npc_vj_sky_rebel"}, true)
				end, --id being the id of the run in curRuns, ran on travelled,
				onFinish = function(run, diff)
					defaultkillallfinish(run, diff, {
						[1] = {"", {20,30}},
						[2] = {"", {40,60}},
						[3] = {"", {60,90}},
						[4] = {"", {80,120}}
					})
				end, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
				cmb = true,
			},
			--[[ --there are currently none setup for this
			[4] = {
				name = function() return "Defend Machine" end,
				desc = function() return "find, activate, and defend a machine. mission is complete when its finished running. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultwavetravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultwavefinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			]]
		},
		waveSpawns = { --idk if ill do waves yet but might as well do them
			--[[
				{vector, angle},
			]]

		},
		serverlist = { --props with chance to spawn
			--[[
			{
				class = "prop_physics", --class
				model = "models/props_junk/wood_crate002a.mdl", --model
				randomskin = true, --if true then random skin, otherwise comment and use
				--skin = 0,
				pos = Vector(8167.5, 8756.5, 608.46875), --pos to spawn at
				angle = Angle(-0.1318359375, 12.392578125, -0.087890625), --angle to spawn at
				--motion = true, --if true, starts unfrozen
				other = { --these will guarantee spawn with this
					{
						class = "prop_physics",
						model = "models/props_junk/wood_crate001a_damaged.mdl",
						randomskin = true,
						pos = Vector(8172.65625, 8774.96875, 648.75),
						angle = Angle(-0.0439453125, -13.53515625, 0),
						motion = true,
					},
				}
			},
			]]
			{
				class = "prop_physics",
				model = "models/props_debris/metal_panel01a.mdl",
				skin = 0,
				pos = Vector(-10569.41796875, 3338.5649414063, -21.448421478271),
				angle = Angle(0.0384521484375, -90.63720703125, -87.863159179688),
				other = {
					{
						class = "prop_physics",
						model = "models/props_debris/metal_panel01a.mdl",
						skin = 0,
						pos = Vector(-10571.319335938, 3338.4482421875, 29.22029876709),
						angle = Angle(0.02197265625, -90.631713867188, -85.418701171875),
					},{
						class = "prop_physics",
						model = "models/props_debris/metal_panel01a.mdl",
						skin = 0,
						pos = Vector(-10662.309570313, 3336.6328125, 15.177766799927),
						angle = Angle(0.9063720703125, 90.10986328125, -1.3238525390625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/scaffoldsection01.mdl",
				skin = 0,
				pos = Vector(-10348.630859375, 2698.0844726563, -50.81791305542),
				angle = Angle(-0.010986328125, 89.967041015625, -0.0054931640625),
				other = {
					{
						class = "prop_physics",
						model = "models/props_junk/metal_paintcan001b.mdl",
						skin = 0,
						pos = Vector(-10326.513671875, 2699.4831542969, 24.080442428589),
						angle = Angle(31.541748046875, 70.493774414063, 89.835205078125),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/props_junk/metal_paintcan001a.mdl",
						skin = 0,
						pos = Vector(-10308.741210938, 2717.6723632813, -44.446601867676),
						angle = Angle(0.0164794921875, 63.078002929688, -0.02197265625),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/props_junk/metal_paintcan001a.mdl",
						skin = 0,
						pos = Vector(-10307.154296875, 2705.4499511719, -44.310520172119),
						angle = Angle(-0.0274658203125, 68.944702148438, 0.087890625),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/couch01.mdl",
				skin = 0,
				pos = Vector(-10580.833984375, 2648.6516113281, -50.917434692383),
				angle = Angle(-0.19775390625, -90.082397460938, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_office/desktable_military.mdl",
				skin = 0,
				pos = Vector(-10438.184570313, 2629.5676269531, -34.705821990967),
				angle = Angle(88.385009765625, -178.49487304688, -1.16455078125),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/filecabinet_three.mdl",
						randomskin = true,
						pos = Vector(-10367.930664063, 2637.9033203125, -50.98934173584),
						angle = Angle(0.0274658203125, 0.0439453125, -0.0054931640625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/couch01.mdl",
				skin = 0,
				pos = Vector(-10581.88671875, 2459.0983886719, -50.885200500488),
				angle = Angle(-0.0054931640625, -90, -0.054931640625),
			},{
				class = "prop_physics",
				model = "models/nt/props_office/desktable_military.mdl",
				skin = 0,
				pos = Vector(-10436.48046875, 2435.0451660156, -34.714530944824),
				angle = Angle(88.357543945313, 179.14855957031, 0.5218505859375),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/filecabinet_three.mdl",
						randomskin = true,
						pos = Vector(-10367.869140625, 2445.9770507813, -50.819755554199),
						angle = Angle(0.0494384765625, 0.06591796875, 0),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_small.mdl",
				randomskin = true,
				pos = Vector(-10671.405273438, 2232.7646484375, -50.967315673828),
				angle = Angle(0.0054931640625, -164.82788085938, -0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_small.mdl",
				randomskin = true,
				pos = Vector(-10743.178710938, 2230.1376953125, -50.837898254395),
				angle = Angle(0, 84.715576171875, -0.054931640625),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_small.mdl",
						randomskin = true,
						pos = Vector(-10743.498046875, 2228.4560546875, -10.082333564758),
						angle = Angle(-0.010986328125, 90.02197265625, -0.010986328125),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/boxpallet.mdl",
				randomskin = true,
				pos = Vector(-10802.471679688, 2637.8659667969, -50.919715881348),
				angle = Angle(-0.10986328125, -89.93408203125, 0.087890625),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/handcart.mdl",
				skin = 0,
				pos = Vector(-10800.0390625, 2586.7236328125, -50.883003234863),
				angle = Angle(0.098876953125, -32.684326171875, 0.098876953125),
			},{
				class = "prop_physics",
				model = "models/nt/props_street/binbags4.mdl",
				skin = 0,
				pos = Vector(-10793.34375, 2439.1628417969, -50.984390258789),
				angle = Angle(0.02197265625, -0.0494384765625, 0.0274658203125),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_large.mdl",
				randomskin = true,
				pos = Vector(-10734.82421875, 2170.3227539063, -50.817810058594),
				angle = Angle(0, -90.038452148438, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_large.mdl",
				randomskin = true,
				pos = Vector(-10737.330078125, 2107.5053710938, -50.815486907959),
				angle = Angle(0, -97.196044921875, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_small.mdl",
				randomskin = true,
				pos = Vector(-10784.78515625, 2179.5910644531, -50.817806243896),
				angle = Angle(-0.010986328125, -89.917602539063, -0.010986328125),
			},{
				class = "prop_physics",
				model = "models/nt/props_office/shoji1.mdl",
				skin = 0,
				pos = Vector(-10955.900390625, 2133.5432128906, -51.913467407227),
				angle = Angle(-0.032958984375, 45.208740234375, 0.0274658203125),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/shoji1.mdl",
						skin = 0,
						pos = Vector(-10993.000976563, 2082.9018554688, -51.825199127197),
						angle = Angle(0.0274658203125, 139.76257324219, -0.02197265625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/desk_military.mdl",
				skin = 0,
				pos = Vector(-11016.07421875, 1953.2395019531, -52.278430938721),
				angle = Angle(0, 180, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/officechair02.mdl",
						randomskin = true,
						pos = Vector(-11091.453125, 2007.7491455078, -38.416633605957),
						angle = Angle(0.7196044921875, 160.6201171875, -88.297119140625),
					},{
						class = "prop_physics",
						model = "models/nt/props_office/officechair02.mdl",
						randomskin = true,
						pos = Vector(-11103.322265625, 1948.6569824219, -50.923622131348),
						angle = Angle(-0.17578125, 179.63195800781, -0.0164794921875),
					},{
						class = "prop_physics",
						model = "models/nt/props_office/filecabinet_three.mdl",
						randomskin = true,
						pos = Vector(-10919.897460938, 1946.3237304688, -50.836208343506),
						angle = Angle(-0.0494384765625, 0, 0),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/mop_bucket.mdl",
				skin = 0,
				pos = Vector(-11219.497070313, 2219.9748535156, -39.396251678467),
				angle = Angle(0.0384521484375, 153.27575683594, -0.0604248046875),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/nt/props_tech/box2.mdl",
				skin = 0,
				pos = Vector(-11154.080078125, 2193.3657226563, 12.147319793701),
				angle = Angle(0, 179.99450683594, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_tech/techcartbox1.mdl",
				randomskin = true,
				pos = Vector(-11151.737304688, 2093.2788085938, -53.040645599365),
				angle = Angle(0, 89.950561523438, -0.0164794921875),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_small.mdl",
						randomskin = true,
						pos = Vector(-11149.35546875, 2170.7536621094, -50.86009979248),
						angle = Angle(-0.0164794921875, -170.9033203125, -0.098876953125),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/dolley.mdl",
				skin = 0,
				pos = Vector(-11196.14453125, 2065.7138671875, -48.130840301514),
				angle = Angle(13.60107421875, -86.451416015625, 0.1153564453125),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11497.267578125, 2154.7687988281, -50.502285003662),
				angle = Angle(0.3570556640625, -89.93408203125, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11621.37109375, 2154.5046386719, -50.802410125732),
				angle = Angle(-0.0164794921875, -89.912109375, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11624.384765625, 1957.4268798828, -50.837535858154),
				angle = Angle(-0.06591796875, 89.5166015625, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11505.470703125, 1957.2824707031, -50.807590484619),
				angle = Angle(-0.054931640625, 89.950561523438, -0.0494384765625),
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(-11354.08203125, 2054.9846191406, -28.287311553955),
				angle = Angle(0.1153564453125, 179.99450683594, -0.0604248046875),
			},{
				class = "prop_physics",
				model = "models/props_c17/lockers001a.mdl",
				skin = 0,
				pos = Vector(-11309.478515625, 2022.9063720703, -15.328437805176),
				angle = Angle(0.0439453125, -89.939575195313, -0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props_c17/furnituresink001a.mdl",
				skin = 0,
				pos = Vector(-11235.809570313, 2020.6215820313, -28.350702285767),
				angle = Angle(0.120849609375, -90.126342773438, 0.3131103515625),
			},{
				class = "prop_physics",
				model = "models/props_c17/furnituretoilet001a.mdl",
				skin = 0,
				pos = Vector(-11151.481445313, 2019.7536621094, -4.0564775466919),
				angle = Angle(0.72509765625, -89.80224609375, -0.5767822265625),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/shoji1.mdl",
						skin = 0,
						pos = Vector(-11188.004882813, 1989.8747558594, -51.494735717773),
						angle = Angle(0.6591796875, 152.45178222656, -0.384521484375),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/water_cooler_onwall.mdl",
				skin = 0,
				pos = Vector(-10798.301757813, 2672.3115234375, -48.399848937988),
				angle = Angle(0, 0, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_office/water_cooler_onwall.mdl",
				skin = 0,
				pos = Vector(-10986.251953125, 2375.7529296875, -52.095649719238),
				angle = Angle(-0.0054931640625, -179.99450683594, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_office/shelves_metal2.mdl",
				skin = 0,
				pos = Vector(-11501.616210938, 2648.9675292969, -50.850006103516),
				angle = Angle(-0.208740234375, 89.97802734375, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_office/shelves_metal3.mdl",
				skin = 0,
				pos = Vector(-11556.469726563, 2630.3466796875, -50.869861602783),
				angle = Angle(0, 0.1153564453125, -0.0439453125),
			},{
				class = "prop_physics",
				model = "models/props/cs_office/shelves_metal.mdl",
				skin = 0,
				pos = Vector(-11556.484375, 2565.8679199219, -50.949947357178),
				angle = Angle(-0.010986328125, 0.010986328125, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/scaffoldsection01.mdl",
				skin = 0,
				pos = Vector(-12123.912109375, 2494.04296875, -50.883678436279),
				angle = Angle(0, 0.1263427734375, -0.10986328125),
				other = {
					{
						class = "prop_physics",
						model = "models/props_junk/metal_paintcan001a.mdl",
						skin = 0,
						pos = Vector(-12095.03515625, 2505.1159667969, -44.425052642822),
						angle = Angle(-0.1373291015625, -10.228271484375, 0.186767578125),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/props_junk/metal_paintcan001a.mdl",
						skin = 0,
						pos = Vector(-12093.692382813, 2516.5556640625, -44.416233062744),
						angle = Angle(0.032958984375, -24.85107421875, 0.054931640625),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/nt/props_construction/toolbox.mdl",
						skin = 0,
						pos = Vector(-12103.502929688, 2543.1945800781, -50.860565185547),
						angle = Angle(-0.52734375, 18.424072265625, 0),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(-11909.368164063, 2227.1201171875, -28.214883804321),
				angle = Angle(0, -91.356811523438, -0.010986328125),
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11852.283203125, 2194.53125, -50.927764892578),
				angle = Angle(-0.010986328125, -89.93408203125, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11757.86328125, 2194.5676269531, -50.889614105225),
				angle = Angle(-0.0439453125, -89.97802734375, -0.0604248046875),
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11851.341796875, 1957.5583496094, -50.788585662842),
				angle = Angle(0, 90, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props/de_inferno/bed.mdl",
				skin = 0,
				pos = Vector(-11756.333984375, 1957.4447021484, -50.929100036621),
				angle = Angle(-0.0164794921875, 89.97802734375, 0.032958984375),
			},{
				class = "prop_physics",
				model = "models/props_debris/metal_panel01a.mdl",
				skin = 0,
				pos = Vector(-12386.211914063, 2237.4323730469, 14.646987915039),
				angle = Angle(0.6317138671875, 89.967041015625, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/props_debris/metal_panel01a.mdl",
						skin = 0,
						pos = Vector(-12214.265625, 2237.4272460938, 14.594289779663),
						angle = Angle(0.6317138671875, 89.97802734375, 0.1263427734375),
					},{
						class = "prop_physics",
						model = "models/props_debris/metal_panel01a.mdl",
						skin = 0,
						pos = Vector(-12514.288085938, 2237.4194335938, 14.615298271179),
						angle = Angle(0.6317138671875, 90, 0.0274658203125),
					},
				}
			},{
				class = "prop_physics",
				model = "models/props_c17/hospital_shelf01.mdl",
				skin = 0,
				pos = Vector(-12318.515625, 2026.3341064453, -32.817806243896),
				angle = Angle(0, 163.61389160156, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/props_c17/hospital_cart01.mdl",
						skin = 0,
						pos = Vector(-12212.854492188, 2025.8062744141, -42.817573547363),
						angle = Angle(0, 150.27099609375, -90.005493164063),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/janitor_cart.mdl",
				skin = 0,
				pos = Vector(-12534.850585938, 2272.8459472656, -31.044624328613),
				angle = Angle(0.2911376953125, 62.133178710938, 0.0494384765625),
			},{
				class = "prop_physics",
				model = "models/nt/props_office/lockers.mdl",
				skin = 0,
				pos = Vector(-12640.995117188, 2610.7770996094, -50.851314544678),
				angle = Angle(0.02197265625, -0.02197265625, 0.0494384765625),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/water_cooler.mdl",
						skin = 0,
						pos = Vector(-12745.900390625, 2614.1110839844, -50.948314666748),
						angle = Angle(0.1593017578125, 59.133911132813, -0.142822265625),
					},{
						class = "prop_physics",
						model = "models/nt/props_office/water_jug.mdl",
						skin = 0,
						pos = Vector(-12770.0078125, 2612.9265136719, 4.448606967926),
						angle = Angle(0.010986328125, 44.653930664063, 0.2197265625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/props_c17/hospital_bed01.mdl",
				skin = 0,
				pos = Vector(-12575.418945313, 3093.0969238281, -36.918804168701),
				angle = Angle(-0.0054931640625, 90.071411132813, 0.054931640625),
			},{
				class = "prop_physics",
				model = "models/props_c17/hospital_bed01.mdl",
				skin = 0,
				pos = Vector(-12705.84375, 3090.8444824219, -29.916215896606),
				angle = Angle(0, -123.82690429688, 90.032958984375),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_large.mdl",
				randomskin = true,
				pos = Vector(-12615.473632813, 3174.3188476563, -50.887771606445),
				angle = Angle(-0.1318359375, 180, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_small.mdl",
						randomskin = true,
						pos = Vector(-12561.409179688, 3168.5598144531, -50.817806243896),
						angle = Angle(0.1153564453125, 83.688354492188, -0.120849609375),
					},{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_large.mdl",
						randomskin = true,
						pos = Vector(-12618, 3239.0810546875, -50.926959991455),
						angle = Angle(0.054931640625, -170.30456542969, 0.02197265625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_large.mdl",
				randomskin = true,
				pos = Vector(-12726.314453125, 3288.9150390625, -50.919952392578),
				angle = Angle(0.0823974609375, -20.901489257813, 0.054931640625),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_small.mdl",
						randomskin = true,
						pos = Vector(-12711.921875, 3344.5534667969, -50.82678604126),
						angle = Angle(0, -5.6634521484375, 0),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/desk_military.mdl",
				skin = 0,
				pos = Vector(-11809.676757813, 3149.6506347656, -51.321697235107),
				angle = Angle(0, -90.137329101563, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/filecabinet_three.mdl",
						randomskin = true,
						pos = Vector(-11819.536132813, 3009.865234375, -50.993980407715),
						angle = Angle(0, -90.038452148438, 0),
					},{
						class = "prop_physics",
						model = "models/nt/props_office/officechair.mdl",
						skin = 0,
						pos = Vector(-11834.314453125, 3206.9248046875, -35.083263397217),
						angle = Angle(82.94677734375, -78.085327148438, 17.210083007813),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/nt/props_office/officechair02.mdl",
						randomskin = true,
						pos = Vector(-11788.193359375, 3100.2416992188, -50.922721862793),
						angle = Angle(-0.010986328125, -79.107055664063, -0.02197265625),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/nt/props_office/officechair02.mdl",
						randomskin = true,
						pos = Vector(-11827.866210938, 3067.9621582031, -36.480804443359),
						angle = Angle(89.697875976563, -74.718017578125, 30.4541015625),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_large.mdl",
				randomskin = true,
				pos = Vector(-11628.278320313, 3198.1411132813, -50.927051544189),
				angle = Angle(0.054931640625, -36.721801757813, 0.0384521484375),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_small.mdl",
						randomskin = true,
						pos = Vector(-11646.702148438, 3138.9287109375, -50.893440246582),
						angle = Angle(0.0054931640625, -83.369750976563, 0.0274658203125),
					},{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_large.mdl",
						randomskin = true,
						pos = Vector(-11552.369140625, 3133.2270507813, -50.871395111084),
						angle = Angle(-0.02197265625, -106.02905273438, -0.032958984375),
					},{
						class = "prop_physics",
						model = "models/nt/props_warehouse/wrapped_product.mdl",
						randomskin = true,
						pos = Vector(-11440.190429688, 3222.7800292969, -50.924152374268),
						angle = Angle(0.0384521484375, -95.982055664063, 0.032958984375),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_office/desktable_military.mdl",
				skin = 0,
				pos = Vector(-11363.461914063, 3214.0544433594, -34.833404541016),
				angle = Angle(88.390502929688, -87.489624023438, 0.02197265625),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/fileboxstack.mdl",
						skin = 0,
						pos = Vector(-11384.243164063, 3032.8720703125, -50.811660766602),
						angle = Angle(0.0274658203125, -89.97802734375, -0.054931640625),
					},{
						class = "prop_physics",
						model = "models/nt/props_office/officechair.mdl",
						skin = 0,
						pos = Vector(-11386.958007813, 3257.4645996094, -50.900062561035),
						angle = Angle(-0.2032470703125, -61.550903320313, -0.120849609375),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/nt/props_office/officechair02.mdl",
						randomskin = true,
						pos = Vector(-11373.721679688, 3110.8078613281, -50.817821502686),
						angle = Angle(0, -114.79064941406, 0),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/nt/props_office/couch01.mdl",
						skin = 0,
						pos = Vector(-11244.142578125, 3080.7897949219, -50.862277984619),
						angle = Angle(-0.032958984375, 179.23645019531, -0.0054931640625),
					},{
						class = "prop_physics",
						model = "models/nt/props_office/filecabinet_three.mdl",
						randomskin = true,
						pos = Vector(-11231.819335938, 3245.9797363281, -50.963230133057),
						angle = Angle(0, 0.0714111328125, 0.0164794921875),
					},{
						class = "prop_physics",
						model = "models/nt/props_office/filecabinet_three.mdl",
						randomskin = true,
						pos = Vector(-11231.892578125, 3177.9912109375, -50.975547790527),
						angle = Angle(0.0604248046875, 0, 0),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_street/binbags4.mdl",
				skin = 0,
				pos = Vector(-11185.231445313, 3342.3598632813, -50.825389862061),
				angle = Angle(0.0274658203125, 3.1365966796875, -0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/nt/props_street/dumpster_rounded.mdl",
				skin = 0,
				pos = Vector(-11183.872070313, 3221.3354492188, -51.214050292969),
				angle = Angle(0.3900146484375, -10.398559570313, -0.1702880859375),
			},{
				class = "prop_physics",
				model = "models/props_debris/metal_panel01a.mdl",
				skin = 0,
				pos = Vector(-10303.309570313, 3210.5053710938, -21.698432922363),
				angle = Angle(0.032958984375, -89.346313476563, 88.9013671875),
				other = {
					{
						class = "prop_physics",
						model = "models/props_debris/metal_panel01a.mdl",
						skin = 0,
						pos = Vector(-10304.341796875, 3210.4721679688, 31.581201553345),
						angle = Angle(-0.0823974609375, -89.373779296875, 92.98828125),
					},{
						class = "prop_physics",
						model = "models/props_debris/metal_panel01a.mdl",
						skin = 0,
						pos = Vector(-10406.484375, 3208.6735839844, 14.644713401794),
						angle = Angle(0.8953857421875, 89.945068359375, 0),
					},
				}
			},
		},
		enemies = { --table of tables of enemies
			--[[
				{"npc class",},
			]]
			{"npc_vj_sky_mp"}, --temp
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_helix",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_citizen",
			},
			{
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},
		},
		objlist = { --collect item objs
			{ --objs
				--[[
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				]]

				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				{
					name = "Small Cache",
					desc = "A small plastic green container with 'GEOSTASH' on it. Quick check inside reveals that there's actually nothing in it.",
					model = "models/props_clutter/geo_cache_001.mdl",
				},
				{
					name = "Dossier",
					desc = "A dossier of some kind.",
					model = "models/stalker/item/handhelds/files4.mdl",
				},
				{
					name = "Journal",
					desc = "A journal of some kind.",
					model = "models/props_lab/bindergraylabel01a.mdl",
				},
			},
			{ --spawn positions
				--vectors
				Vector(-10945.805664063, 2402.6181640625, -51.286354064941),
				Vector(-10931.6015625, 2105.6591796875, -51.286354064941),
				Vector(-11320.446289063, 2620.2385253906, -51.286354064941),
				Vector(-11151.227539063, 2022.2340087891, -36.672729492188),
				Vector(-11270.200195313, 2020.8983154297, -51.286354064941),
				Vector(-11555.020507813, 2514.349609375, -51.286357879639),
				Vector(-12397.803710938, 2042.5207519531, -15.036348342896),
				Vector(-12127.669921875, 2443.8666992188, -51.286354064941),
				Vector(-12120.712890625, 2496.0659179688, 18.63013458252),
				Vector(-12380.313476563, 3314.2185058594, -51.286354064941),
				Vector(-12702.404296875, 3331.78125, -10.368141174316),
				Vector(-12779.373046875, 3162.8662109375, -51.286357879639),
				Vector(-11746.91015625, 2839.388671875, -51.286350250244),
				Vector(-11840.262695313, 3229.2419433594, -51.286361694336),
				Vector(-11598.237304688, 3228.6328125, -51.286357879639),
				Vector(-11632.85546875, 3214.0170898438, 27.668277740479),
			}
		},
		enemySpawns = { --possible enemy spawns
			--	{vector, angle}
			--	or tables of ^ for groups to spawn at once
			{Vector(-10432.514648438, 2631.3679199219, -51.286354064941), Angle(0, -160.67340087891, 0)},
			{Vector(-10427.754882813, 2530.4267578125, -51.286354064941), Angle(0, 172.34561157227, 0)},
			{Vector(-10408.857421875, 2446.8796386719, -51.286354064941), Angle(0, -161.25071716309, 0)},
			{Vector(-10425.50390625, 2336.6457519531, -51.286354064941), Angle(0, 173.21391296387, 0)},
			{Vector(-10829.040039063, 2275.6508789063, -51.286354064941), Angle(0, 43.850654602051, 0)},
			{Vector(-10677.721679688, 2159.1662597656, -51.286354064941), Angle(0, -102.13449859619, 0)},
			{
				{Vector(-10693.711914063, 1962.9390869141, -51.286354064941), Angle(0, 127.77951049805, 0)},
				{Vector(-10784.653320313, 1987.4591064453, -51.286354064941), Angle(0, 81.20548248291, 0)},
			},
			{Vector(-10807.071289063, 2522.8889160156, -51.286354064941), Angle(0, 120.95406341553, 0)},
			{Vector(-11102.752929688, 2253.05078125, -51.286354064941), Angle(0, 53.421653747559, 0)},
			{Vector(-11089.510742188, 2115.1318359375, -51.286354064941), Angle(0, 33.426929473877, 0)},
			{Vector(-11076.725585938, 2514.0471191406, -51.286354064941), Angle(0, 90.535087585449, 0)},
			{Vector(-11225.8359375, 2532.0173339844, -51.286354064941), Angle(0, -83.48998260498, 0)},
			{Vector(-11242.059570313, 2097.2114257813, -51.286354064941), Angle(0, 104.01081848145, 0)},
			{Vector(-11553.524414063, 2145.9426269531, -51.286354064941), Angle(0, 0.58449530601501, 0)},
			{Vector(-11558.002929688, 1941.0446777344, -51.286354064941), Angle(0, 58.561096191406, 0)},
			{Vector(-11271.680664063, 1957.5618896484, -51.286354064941), Angle(0, 147.69422912598, 0)},
			{
				{Vector(-11450.739257813, 2457.2731933594, -51.286354064941), Angle(0, 71.409255981445, 0)},
				{Vector(-11454.739257813, 2515.3686523438, -51.286354064941), Angle(0, -58.757061004639, 0)},
			},
			{Vector(-11606.16796875, 2249.0395507813, -51.286354064941), Angle(0, 65.000205993652, 0)},
			{
				{Vector(-11588.696289063, 2461.7307128906, -51.286354064941), Angle(0, 96.799125671387, 0)},
				{Vector(-11608.084960938, 2550.8967285156, -51.286354064941), Angle(0, -93.767768859863, 0)},
			},
			{Vector(-11604.51953125, 2783.6840820313, -51.286354064941), Angle(0, -18.366044998169, 0)},
			{Vector(-11932.209960938, 2325.8923339844, -51.286354064941), Angle(0, 14.250652313232, 0)},
			{Vector(-11746.626953125, 2093.3146972656, -51.286354064941), Angle(0, 147.86996459961, 0)},
			{Vector(-11948.533203125, 1990.9715576172, -51.286354064941), Angle(0, 98.324775695801, 0)},
			{Vector(-12112.333007813, 2051.5766601563, -51.286354064941), Angle(0, 102.50048065186, 0)},
			{Vector(-12324.948242188, 2116.2863769531, -51.286354064941), Angle(0, -12.825325965881, 0)},
			{Vector(-12500.387695313, 2145.2724609375, -51.286354064941), Angle(0, 8.6148366928101, 0)},
			{Vector(-12248.892578125, 2553.6477050781, -51.286354064941), Angle(0, -71.685073852539, 0)},
			{
				{Vector(-12351.072265625, 2317.1235351563, -51.286354064941), Angle(0, -2.2256107330322, 0)},
				{Vector(-12262.876953125, 2322.3200683594, -51.286354064941), Angle(0, -155.91981506348, 0)},
			},
			{Vector(-12527.713867188, 2455.1455078125, -51.286354064941), Angle(0, 66.044410705566, 0)},
			{Vector(-12389.64453125, 2648.1916503906, -51.286354064941), Angle(0, 97.441879272461, 0)},
			{Vector(-12681.065429688, 2748.2314453125, -51.286354064941), Angle(0, -25.913984298706, 0)},
			{Vector(-12594.15234375, 2657.2170410156, -51.286354064941), Angle(0, 47.721084594727, 0)},
			{Vector(-12536.111328125, 3014.2133789063, -51.286354064941), Angle(0, -99.403511047363, 0)},
			{Vector(-12781.96875, 3042.5261230469, -51.286354064941), Angle(0, -13.54776096344, 0)},
			{Vector(-12763.932617188, 2932.2351074219, -51.286354064941), Angle(0, 0.42443689703941, 0)},
			{Vector(-12555.911132813, 3337.2424316406, -51.286354064941), Angle(0, -77.160430908203, 0)},
			{Vector(-12713.22265625, 3177.2863769531, -51.286472320557), Angle(0, 36.464080810547, 0)},
			{Vector(-12411.856445313, 3321.8811035156, -51.286472320557), Angle(0, -97.315826416016, 0)},
			{
				{Vector(-12323.118164063, 3260.8989257813, -51.286354064941), Angle(0, 30.92338180542, 0)},
				{Vector(-12204.19921875, 3301.7346191406, -51.286354064941), Angle(0, -100.92932128906, 0)},
			},
			{Vector(-12229.18359375, 2747.4494628906, -51.286354064941), Angle(0, 102.79200744629, 0)},
			{Vector(-12030.120117188, 3125.1518554688, -51.286354064941), Angle(0, -70.575698852539, 0)},
			{Vector(-11787.274414063, 2765.857421875, -51.286354064941), Angle(0, -148.22584533691, 0)},
			{Vector(-12088.645507813, 2717.3813476563, -51.286354064941), Angle(0, 46.998645782471, 0)},
			{Vector(-11871.481445313, 2573.4645996094, -51.286354064941), Angle(0, -64.297164916992, 0)},
			{Vector(-11789.024414063, 3204.505859375, -51.286354064941), Angle(0, -76.035949707031, 0)},
			{Vector(-11443.244140625, 3042.8020019531, -51.286354064941), Angle(0, -167.45774841309, 0)},
			{Vector(-11461.416015625, 3157.21875, -51.286354064941), Angle(0, -135.13694763184, 0)},
			{Vector(-11320.345703125, 3062.025390625, -51.286964416504), Angle(0, 69.387474060059, 0)},
			{Vector(-11336.4453125, 3237.9147949219, -51.286964416504), Angle(0, -80.306678771973, 0)},
			{Vector(-10928.186523438, 3327.8803710938, -51.286964416504), Angle(0, 151.93598937988, 0)},
			{Vector(-10955.137695313, 3424.5705566406, -51.286964416504), Angle(0, -159.00065612793, 0)},
			{Vector(-11141.8359375, 3446.8513183594, -51.286964416504), Angle(0, -80.226341247559, 0)},

		},
		items = { --loot spawn list
			--{loottableid, vector},
			{"trashrun", Vector(-10726.083984375, 3184.9494628906, -7.2863464355469)},
			{"trashrun", Vector(-10735.798828125, 3048.9562988281, -7.2863502502441)},
			{"trashrunrare", Vector(-10848.209960938, 3140.4978027344, -51.286350250244)},
			{"trashrun", Vector(-10980.82421875, 2962.955078125, -7.2863502502441)},
			{"tier1", Vector(-11187.747070313, 3203.4853515625, -11.010520935059)},
			{"trashrunrare", Vector(-11187.990234375, 3422.958984375, -51.286354064941)},
			{"trashrun", Vector(-10660.793945313, 2610.8146972656, -5.5653991699219)},
			{"trashrunrare", Vector(-10609.440429688, 2642.1848144531, -27.778049468994)},
			{"trashrunrare", Vector(-10368.67578125, 2660.5075683594, 9.0401382446289)},
			{"trashrun", Vector(-10561.359375, 2455.1481933594, -27.787742614746)},
			{"tier1", Vector(-10456.744140625, 2464.3977050781, -51.286354064941)},
			{"trashrun", Vector(-10708.703125, 2232.1730957031, -51.286350250244)},
			{"trashrun", Vector(-10791.130859375, 2184.0073242188, -10.358781814575)},
			{"tier2", Vector(-10880.993164063, 1935.3249511719, -51.286354064941)},
			{"tier1", Vector(-10676.533203125, 2174.6147460938, -51.286350250244)},
			{"trashrun", Vector(-10809.6171875, 2394.3422851563, -51.286354064941)},
			{"trashrun", Vector(-10808.555664063, 2632.1123046875, -16.532669067383)},
			{"trashrun", Vector(-10932.043945313, 2546.9035644531, -7.2863502502441)},
			{"trashrunrare", Vector(-10928.987304688, 2438.3259277344, -7.2863502502441)},
			{"trashrun", Vector(-11021.973632813, 1984.1268310547, -18.100856781006)},
			{"trashrun", Vector(-10923.977539063, 1965.7670898438, 9.1915454864502)},
			{"trashrunrare", Vector(-10985.93359375, 2449.4597167969, -7.2863502502441)},
			{"trashrun", Vector(-11162.497070313, 2167.4353027344, -10.399576187134)},
			{"trashrun", Vector(-11494.012695313, 2166.4421386719, -32.412815093994)},
			{"trashrunrare", Vector(-11505.606445313, 1978.3530273438, -32.771095275879)},
			{"trashrun", Vector(-11659.536132813, 2162.8359375, -51.286354064941)},
			{"trashrun", Vector(-11269.774414063, 2018.6923828125, -51.286354064941)},
			{"trashrunrare", Vector(-11506.598632813, 2602.1325683594, -51.286354064941)},
			{"trashrun", Vector(-11503.6328125, 2429.421875, -7.2863502502441)},
			{"tier1", Vector(-11681.717773438, 2418.6079101563, -7.2863502502441)},
			{"trashrunrare", Vector(-11559.21875, 2568.9411621094, -19.852119445801)},
			{"trashrun", Vector(-11675.673828125, 2783.8249511719, -7.2863502502441)},
			{"trashrun", Vector(-11910.993164063, 2222.6494140625, -5.5727882385254)},
			{"trashrunrare", Vector(-11853.93359375, 2176.404296875, -32.907867431641)},
			{"trashrun", Vector(-11853.252929688, 1938.8947753906, -32.771980285645)},
			{"trashrun", Vector(-11761.181640625, 1979.2548828125, -32.903614044189)},
			{"trashrunrare", Vector(-11716.81640625, 2216.9506835938, -51.286354064941)},
			{"trashrunrare", Vector(-12235.826171875, 2105.6801757813, -15.03635597229)},
			{"trashrun", Vector(-12316.92578125, 2027.1265869141, -46.786556243896)},
			{"trashrun", Vector(-12437.502929688, 2050.314453125, -51.286350250244)},
			{"trashrunrare", Vector(-12535.854492188, 2272.3254394531, -13.790616989136)},
			{"trashrun", Vector(-12772.977539063, 2643.1208496094, -7.2863521575928)},
			{"trashrun", Vector(-12392.602539063, 2632.4948730469, -51.286354064941)},
			{"trashrunrare", Vector(-12608.545898438, 3119.9250488281, -51.286354064941)},
			{"trashrunrare", Vector(-12374.376953125, 3055.1118164063, -27.799518585205)},
			{"tier1", Vector(-12556.217773438, 3171.57421875, -10.355979919434)},
			{"tier2", Vector(-12778.896484375, 3340.3598632813, -51.286350250244)},
			{"trashrun", Vector(-12663.884765625, 3165.2595214844, -51.286354064941)},
			{"trashrun", Vector(-11817.250976563, 3154.0090332031, -51.286354064941)},
			{"trashrun", Vector(-11798.596679688, 3011.6242675781, 9.0372657775879)},
			{"trashrun", Vector(-11650.669921875, 3138.3071289063, -10.436723709106)},
			{"trashrunrare", Vector(-11435.390625, 3216.2097167969, -16.013399124146)},
			{"trashrun", Vector(-11243.56640625, 3086.2971191406, -27.745288848877)},
			{"trashrun", Vector(-11376.065429688, 3030.7316894531, -7.0449523925781)},
			{"trashrun", Vector(-11231.08203125, 3186.896484375, 9.054874420166)},
			{"trashrunrare", Vector(-11234.21484375, 3264.0280761719, 9.1966400146484)},
			{"trashrunrare", Vector(-11390.181640625, 3192.0324707031, -51.286354064941)},
			
		},
		events = { --rng events
			[1] = {
				name = "reinforcements", --name of event,
				valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
				func = function(id)
					local run = PLUGIN.curRuns[id]
					local diff = run.diff or 0
					local def = PLUGIN.areas[run.area]
					local players = run.players

					if(!players or #players == 0) then return end

					defaultreinforcements(run, def, diff)
				end, --id being the id of the run in curRuns, function ran when event is picked,
				max = 1, --amount of times this event can be chosen per run,
			},--]]
			[2] = {
			name = "nothing", --name of event,
			valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
			func = function(id)
			--	local run = PLUGIN.curRuns[id]

			end, --id being the id of the run in curRuns, function ran when event is picked,
			max = 4, --amount of times this event can be chosen per run,
			},

		},
		playerspawns = { --tables of tables of player spawns
			{ --table of vector3 angle tables
				{Vector(-10524.9375, 3544.4104003906, -51.286354064941), Angle(0, -91.348686218262, 0)},
				{Vector(-10518.794921875, 3462.2673339844, -51.286354064941), Angle(0, -90.545623779297, 0)},
				{Vector(-10598.436523438, 3464.2336425781, -51.286354064941), Angle(0, -87.81534576416, 0)},
				{Vector(-10601.862304688, 3554.0349121094, -51.286354064941), Angle(0, -87.81534576416, 0)},
			},
			{
				{Vector(-10243.966796875, 3262.9914550781, -51.286354064941), Angle(0, -178.59448242188, 0)},
				{Vector(-10291.59375, 3261.822265625, -51.286354064941), Angle(0, -178.59448242188, 0)},
				{Vector(-10342.973632813, 3260.5610351563, -51.286354064941), Angle(0, -178.59448242188, 0)},
				{Vector(-10398.654296875, 3259.1955566406, -51.286354064941), Angle(0, -178.35357666016, 0)},
			}
		},
		center = Vector(-11487.037109, 2725.886230, -53.667160),--the general center of the area
		centerrange = 1500, --the general length to encapsulate the entire area into a circle
		maxply = 4, --max player count
	},
	[2] = {
		name = function() return "Subway" end,
		objectives = {
			[1] = {
				name = function() return "Kill All" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override) 
				end,
				]]
				onTravel = defaultkillalltravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultkillallfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[2] = {
				name = function() return "Collect Item" end,
				desc = function() return "collect a particular item, details will be sent via pm on accept. when you get back with the item, turn the objective into the red drop box to complete the run. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]
					
					
					local targ = def.objlist[1][math.random(#def.objlist[1])]

					run.objdef = targ

					local msg = "The item you are looking for is a "..targ.name.."."
					timer.Simple(0, function()
					netstream.Start(run.players, "fakepdapm", "from AUTOREPLY: "..msg)
					end)

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultcollecttravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultcollectfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[3] = {
				name = function() return "Kill Target" end,
				desc = function() return "kill a specific target in the area, details will be forwarded via autoreply on acceptance. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					defaulttargetsetup(run)

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaulttargettravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaulttargetfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[4] = {
				name = function() return "Kill All (VR)" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override, disable item spawning) 
				end,
				]]
				onTravel = function(run, diff)
					defaultkillalltravel(run, diff, nil, {"npc_vj_sky_rebel"}, true)
				end, --id being the id of the run in curRuns, ran on travelled,
				onFinish = function(run, diff)
					defaultkillallfinish(run, diff, {
						[1] = {"", {20,30}},
						[2] = {"", {40,60}},
						[3] = {"", {60,90}},
						[4] = {"", {80,120}}
					})
				end, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
				cmb = true,
			},
			--[[ --there are currently none setup for this
			[4] = {
				name = function() return "Defend Machine" end,
				desc = function() return "find, activate, and defend a machine. mission is complete when its finished running. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultwavetravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultwavefinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			]]
		},
		waveSpawns = { --idk if ill do waves yet but might as well do them
			--[[
				{vector, angle},
			]]

		},
		serverlist = { --props with chance to spawn
			--[[
			{
				class = "prop_physics", --class
				model = "models/props_junk/wood_crate002a.mdl", --model
				randomskin = true, --if true then random skin, otherwise comment and use
				--skin = 0,
				pos = Vector(8167.5, 8756.5, 608.46875), --pos to spawn at
				angle = Angle(-0.1318359375, 12.392578125, -0.087890625), --angle to spawn at
				--motion = true, --if true, starts unfrozen
				other = { --these will guarantee spawn with this
					{
						class = "prop_physics",
						model = "models/props_junk/wood_crate001a_damaged.mdl",
						randomskin = true,
						pos = Vector(8172.65625, 8774.96875, 648.75),
						angle = Angle(-0.0439453125, -13.53515625, 0),
						motion = true,
					},
				}
			},
			]]
			{
				class = "prop_physics",
				model = "models/props_junk/wood_crate002a.mdl",
				randomskin = true,
				pos = Vector(-8400.9658203125, 1482.5891113281, -91.513206481934),
				angle = Angle(-0.0164794921875, 90.1318359375, 0.0714111328125),
				motion = true,
				other = {
					{
						class = "prop_physics",
						model = "models/props_junk/wood_crate001a_damaged.mdl",
						randomskin = true,
						pos = Vector(-8406.0146484375, 1479.7194824219, -51.145236968994),
						angle = Angle(0, 79.480590820313, 0.0823974609375),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(-8281.013671875, 1366.0025634766, -88.972030639648),
				angle = Angle(0, 90.016479492188, -0.010986328125),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_desk001b.mdl",
				skin = 0,
				pos = Vector(-8100.2270507813, 1479.7576904297, -95.204963684082),
				angle = Angle(-0.2142333984375, 90.236206054688, 0.02197265625),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_office/phone1.mdl",
						skin = 0,
						pos = Vector(-8147.025390625, 1480.2219238281, -77.931205749512),
						angle = Angle(-0.714111328125, 75.78369140625, 0.0823974609375),
					},{
						class = "prop_physics",
						model = "models/nt/props_debris/cardboard_box_open.mdl",
						skin = 0,
						pos = Vector(-8064.576171875, 1480.0389404297, -70.230964660645),
						angle = Angle(-0.2142333984375, 140.625, -0.2581787109375),
					},{
						class = "prop_physics",
						model = "models/nt/props_debris/cardboard_box_02.mdl",
						skin = 0,
						pos = Vector(-8067.7939453125, 1479.9427490234, -103.98299407959),
						angle = Angle(0.0604248046875, 121.58569335938, 0.0439453125),
					},{
						class = "prop_physics",
						model = "models/props_junk/plasticbucket001a.mdl",
						skin = 0,
						pos = Vector(-8149.291015625, 1476.6405029297, -104.90819549561),
						angle = Angle(60.737915039063, 58.694458007813, -87.802734375),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/props_junk/metal_paintcan001a.mdl",
						skin = 0,
						pos = Vector(-8131.6557617188, 1470.3852539063, -71.458969116211),
						angle = Angle(-0.318603515625, 74.635620117188, -0.230712890625),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_storagecloset001b.mdl",
				skin = 0,
				pos = Vector(-8230.3486328125, 1579.8400878906, -86.802589416504),
				angle = Angle(-0.0274658203125, 75.399169921875, 90),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/fourbyeigth.mdl",
				randomskin = true,
				pos = Vector(-8136.3857421875, 1459.4530029297, -41.064075469971),
				angle = Angle(-77.557983398438, -179.31335449219, -90.615234375),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_construction/fourbyeigth.mdl",
						randomskin = true,
						pos = Vector(-8085.4077148438, 1461.0297851563, -42.0280418396),
						angle = Angle(-89.637451171875, -21.615600585938, 111.70349121094),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/wrapped_product.mdl",
				randomskin = true,
				pos = Vector(-8262.9482421875, 1655.5234375, -111.58106231689),
				angle = Angle(0, -24.049072265625, -0.02197265625),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_filecabinet002a.mdl",
				skin = 0,
				pos = Vector(-8025.6948242188, 1473.8471679688, -76.709823608398),
				angle = Angle(-0.0164794921875, 89.725341796875, 0.318603515625),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_filecabinet002a.mdl",
				skin = 0,
				pos = Vector(-7996.046875, 1473.8511962891, -76.71656036377),
				angle = Angle(0.0384521484375, 90.054931640625, 0.37353515625),
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(-7984.111328125, 1541.7373046875, -88.895431518555),
				angle = Angle(0, -179.96704101563, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/boxpallet.mdl",
				randomskin = true,
				pos = Vector(-7998.0634765625, 1655.3217773438, -111.43810272217),
				angle = Angle(0, -179.99450683594, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/boxpallet.mdl",
						randomskin = true,
						pos = Vector(-7998.0571289063, 1655.3201904297, -76.735595703125),
						angle = Angle(0, 179.99450683594, -0.0054931640625),
					},{
						class = "prop_physics",
						model = "models/nt/props_warehouse/handcart.mdl",
						skin = 0,
						pos = Vector(-7997.2954101563, 1610.5718994141, -111.52170562744),
						angle = Angle(0.10986328125, 2.57080078125, -0.17578125),
					},
				}
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001_explosive.mdl",
				skin = 0,
				pos = Vector(-8043.6640625, 1667.6380615234, -111.60980224609),
				angle = Angle(-0.0274658203125, -130.40771484375, -0.0933837890625),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/props_trainstation/bench_indoor001a.mdl",
				skin = 0,
				pos = Vector(-7794.2348632813, 1494.0366210938, -92.820907592773),
				angle = Angle(0.362548828125, -0.06591796875, 0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/nt/props_street/binbags4.mdl",
				skin = 0,
				pos = Vector(-7757.6162109375, 1685.2476806641, -111.5337600708),
				angle = Angle(0.0164794921875, -86.912841796875, -0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_large.mdl",
				skin = 0,
				pos = Vector(-7733.6640625, 1291.4124755859, -111.60176849365),
				angle = Angle(0, 81.01318359375, 0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(-7594.5336914063, 1040.5665283203, -111.42872619629),
				angle = Angle(0.0274658203125, 127.11730957031, -0.0274658203125),
			},{
				class = "prop_physics",
				model = "models/nt/props_street/dumpster_rounded.mdl",
				randomskin = true,
				pos = Vector(-7748.515625, 936.99652099609, -112.08319091797),
				angle = Angle(0, 25.5322265625, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/sackstack.mdl",
				skin = 0,
				pos = Vector(-7587.7861328125, 892.47454833984, -111.50019073486),
				angle = Angle(0, -101.84875488281, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_street/market_stand.mdl",
				skin = 0,
				pos = Vector(-7668.255859375, 726.01324462891, -62.509014129639),
				angle = Angle(-89.659423828125, 96.822509765625, 173.1884765625),
			},{
				class = "prop_physics",
				model = "models/props_junk/trashdumpster01a.mdl",
				skin = 0,
				pos = Vector(-7693.068359375, 530.12579345703, -86.405601501465),
				angle = Angle(0, 99.415283203125, 0),
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001.mdl",
				randomskin = true,
				pos = Vector(-7584.1235351563, 603.81329345703, -111.51878356934),
				angle = Angle(0.0274658203125, -56.31591796875, -0.0384521484375),
				motion = true,
				other = {
					{
						class = "prop_physics",
						model = "models/props_c17/oildrum001.mdl",
						randomskin = true,
						pos = Vector(-7594.8486328125, 584.69580078125, -66.082397460938),
						angle = Angle(0.6317138671875, -98.426513671875, -0.5328369140625),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/props_c17/oildrum001.mdl",
						randomskin = true,
						pos = Vector(-7579.0200195313, 575.19976806641, -111.63412475586),
						angle = Angle(0.0164794921875, -127.99621582031, 0.076904296875),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/props_c17/oildrum001_explosive.mdl",
						skin = 0,
						pos = Vector(-7605.2954101563, 585.24169921875, -111.63263702393),
						angle = Angle(-0.0054931640625, -120.498046875, 0.0054931640625),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/props_junk/wood_crate002a.mdl",
				randomskin = true,
				pos = Vector(-7600.4677734375, 380.60562133789, -91.541053771973),
				angle = Angle(0, 99.547119140625, -0.0054931640625),
				motion = true,
				other = {
					{
						class = "prop_physics",
						model = "models/props_junk/wood_crate001a_damaged.mdl",
						randomskin = true,
						pos = Vector(-7597.0908203125, 387.23468017578, -51.278575897217),
						angle = Angle(0.0274658203125, 130.30883789063, 0.1373291015625),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(-7726.4438476563, -485.51098632813, -111.53829193115),
				angle = Angle(0.02197265625, -83.49609375, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(-8355.43359375, -516.75677490234, -111.44235229492),
				angle = Angle(0.02197265625, -0.0384521484375, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/crate_stackmill.mdl",
				skin = 0,
				pos = Vector(-8111.9555664063, -280.15841674805, -113.53771209717),
				angle = Angle(0, -13.51318359375, 0.538330078125),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/crate_extrasmallmill.mdl",
				skin = 0,
				pos = Vector(-8564.7578125, -349.74554443359, -111.11436462402),
				angle = Angle(0.15380859375, -179.97802734375, 0.72509765625),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/cinderblock_stack.mdl",
				skin = 0,
				pos = Vector(-8404.158203125, 463.09240722656, -111.46097564697),
				angle = Angle(0.0439453125, -89.357299804688, 0.5657958984375),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/table_shed.mdl",
				skin = 0,
				pos = Vector(-8467.0771484375, 201.63710021973, -111.51906585693),
				angle = Angle(0.0494384765625, -90, -0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/couch.mdl",
				skin = 0,
				pos = Vector(-8577.794921875, 274.42047119141, -112.43991851807),
				angle = Angle(0, 173.671875, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/footlocker01_closed.mdl",
				skin = 0,
				pos = Vector(-8656.609375, 284.2373046875, -99.56763458252),
				angle = Angle(0, -87.396240234375, -0.010986328125),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/haybale_target_02.mdl",
				skin = 0,
				pos = Vector(-8748.80078125, 200.50463867188, -111.80458068848),
				angle = Angle(-0.0384521484375, -6.9049072265625, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/haybale_target_03.mdl",
				skin = 0,
				pos = Vector(-8810.4814453125, 132.92137145996, -112.09033966064),
				angle = Angle(-0.2911376953125, 11.288452148438, 0.1263427734375),
				other = {
					{
						class = "prop_physics",
						model = "models/props/cs_militia/haybale_target_03.mdl",
						skin = 0,
						pos = Vector(-8804.3486328125, 239.92642211914, -112.10090637207),
						angle = Angle(-1.2030029296875, 168.87634277344, -0.010986328125),
					},
				}
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/bar01.mdl",
				skin = 0,
				pos = Vector(-8578.40234375, 494.63848876953, -111.62128448486),
				angle = Angle(0, 180, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/stove01.mdl",
				skin = 0,
				pos = Vector(-8449.138671875, 462.82177734375, -93.497856140137),
				angle = Angle(0.0054931640625, 89.961547851563, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/food_stack.mdl",
				skin = 0,
				pos = Vector(-8476.0380859375, 568.48394775391, -111.58354949951),
				angle = Angle(0.0384521484375, -179.07165527344, -0.1153564453125),
			},{
				class = "prop_physics",
				model = "models/nt/props_office/lockers.mdl",
				skin = 1,
				pos = Vector(-8780.845703125, 316.80996704102, -111.55966949463),
				angle = Angle(-0.0164794921875, 0, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/shelves_wood.mdl",
				skin = 0,
				pos = Vector(-8859.470703125, 508.0207824707, -111.50408935547),
				angle = Angle(0, -0.010986328125, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/shelves_wood.mdl",
				skin = 0,
				pos = Vector(-8758.6943359375, 577.60491943359, -111.53814697266),
				angle = Angle(0, 89.93408203125, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/props_c17/oildrum001_explosive.mdl",
						skin = 0,
						pos = Vector(-8749.767578125, 579.75817871094, -8.5211772918701),
						angle = Angle(75.6298828125, -87.610473632813, 90.02197265625),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001.mdl",
				randomskin = true,
				pos = Vector(-8760.5654296875, 525.09167480469, -111.50019836426),
				angle = Angle(0, -62.528686523438, 0),
				motion = true,
				other = {
					{
						class = "prop_physics",
						model = "models/props_c17/oildrum001.mdl",
						randomskin = true,
						pos = Vector(-8731.666015625, 541.86999511719, -111.60939025879),
						angle = Angle(-0.0604248046875, -85.204467773438, -0.274658203125),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001_explosive.mdl",
				skin = 0,
				pos = Vector(-8680.189453125, 579.76391601563, -111.50019073486),
				angle = Angle(0, 17.149658203125, 0),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/nt/props_street/trash_compactor.mdl",
				randomskin = true,
				pos = Vector(-8710.46875, 731.08929443359, -111.55012512207),
				angle = Angle(0.0274658203125, -89.994506835938, 0.032958984375),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(-8492.9345703125, 868.5498046875, -111.42872619629),
				angle = Angle(0, -58.656005859375, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/props/de_nuke/crate_extrasmall.mdl",
						skin = 0,
						pos = Vector(-8524.3818359375, 919.50012207031, -111.32228851318),
						angle = Angle(0.06591796875, -157.57690429688, 0.0054931640625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/scaffoldsection01.mdl",
				skin = 0,
				pos = Vector(-8460.9462890625, 1087.9089355469, -111.50003051758),
				angle = Angle(0, -90.120849609375, 0),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_construction/toolbox.mdl",
						skin = 0,
						pos = Vector(-8500.2958984375, 1058.8530273438, -111.63360595703),
						angle = Angle(-0.0439453125, -53.981323242188, 0),
					},
				}
			},
		},
		enemies = { --table of tables of enemies
			--[[
				{"npc class",},
			]]
			{"npc_vj_sky_mp"}, --temp
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_helix",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_citizen",
			},
			{
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},

		},
		objlist = { --collect item objs
			{ --objs
				--[[
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				]]
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				{
					name = "Small Cache",
					desc = "A small plastic green container with 'GEOSTASH' on it. Quick check inside reveals that there's actually nothing in it.",
					model = "models/props_clutter/geo_cache_001.mdl",
				},
				{
					name = "Dossier",
					desc = "A dossier of some kind.",
					model = "models/stalker/item/handhelds/files4.mdl",
				},
				{
					name = "Journal",
					desc = "A journal of some kind.",
					model = "models/props_lab/bindergraylabel01a.mdl",
				},

			},
			{ --spawn positions
				--vectors
				Vector(-8762.361328125, -136.87034606934, -63.655693054199),
				Vector(-8520.62890625, 213.75801086426, -111.96875),
				Vector(-8467.666015625, 205.12768554688, -76.379386901855),
				Vector(-8795.2802734375, 289.28704833984, -111.96875),
				Vector(-8442.451171875, 104.67403411865, -111.96875),
				Vector(-8611.357421875, 518.39831542969, -67.553779602051),
				Vector(-8442.8720703125, 530.69927978516, -111.96874237061),
				Vector(-8836.140625, 581.49517822266, -111.96875),
				Vector(-8311.46484375, 753.92584228516, -111.96875),
				Vector(-8146.2241210938, 1466.9074707031, -78.3994140625),
				Vector(-7984.3149414063, 1584.2655029297, -111.96875),
				Vector(-7981.0224609375, 1494.0877685547, -111.96875),
				Vector(-8062.76953125, 514.49725341797, -111.96875),
				Vector(-7571.4125976563, 520.59521484375, -15.96875),
				Vector(-7842.7612304688, -655.22290039063, -111.96875),
				Vector(-8054.3916015625, -696.87335205078, -111.96875),
				Vector(-8339.958984375, -748.10278320313, -111.96875),

			}
		},
		enemySpawns = { --possible enemy spawns
			--{vector, angle} or tables of these to spawn them all at once
			{Vector(-8208.072265625, 1621.7689208984, -111.96875), Angle(0, -103.70508575439, 0)},
			{Vector(-8237.716796875, 1736.8980712891, -111.96875), Angle(0, -70.862442016602, 0)},
			{Vector(-8067.1513671875, 1556.6546630859, -111.96875), Angle(0, -155.09727478027, 0)},
			{Vector(-8065.27734375, 1635.7504882813, -111.96875), Angle(0, -141.12515258789, 0)},
			{Vector(-7916.7973632813, 1403.3615722656, -111.96875), Angle(0, 178.56434631348, 0)},
			{Vector(-7686.388671875, 1551.9803466797, -111.96875), Angle(0, -85.637924194336, 0)},
			{Vector(-7608.169921875, 1649.4404296875, -111.96875), Angle(0, -132.94972229004, 0)},
			{Vector(-7736.783203125, 1200.3391113281, -111.96875), Angle(0, -61.723552703857, 0)},
			{Vector(-7662.9067382813, 895.28094482422, -111.96875), Angle(0, 88.357223510742, 0)},
			{Vector(-7853.029296875, 1007.7120361328, -111.96875), Angle(0, 36.066787719727, 0)},
			{Vector(-7864.9145507813, 849.47149658203, -111.96875), Angle(0, 145.45042419434, 0)},
			{Vector(-8119.2543945313, 1160.9854736328, -111.96875), Angle(0, -73.848709106445, 0)},
			{Vector(-8177.8671875, 944.46276855469, -111.96875), Angle(0, 35.359298706055, 0)},
			{Vector(-7659.2451171875, 701.20971679688, -111.96875), Angle(0, 89.481719970703, 0)},
			{Vector(-7675.56640625, 812.75006103516, -111.96875), Angle(0, -85.90845489502, 0)},
			{Vector(-7703.6274414063, 590.72149658203, -111.96875), Angle(0, -154.96647644043, 0)},
			{Vector(-7644.2182617188, 443.56015014648, -111.96875), Angle(0, 86.897094726563, 0)},
			{Vector(-7598.3974609375, 248.05955505371, -111.96875), Angle(0, -84.704078674316, 0)},
			{Vector(-7948.8388671875, 591.97021484375, -111.96875), Angle(0, -10.587129592896, 0)},
			{Vector(-7900.322265625, 336.55291748047, -111.96875), Angle(0, 114.60060882568, 0)},
			{Vector(-8205.8115234375, 393.36755371094, -111.96875), Angle(0, -22.647192001343, 0)},
			{Vector(-8097.3671875, 532.21380615234, -111.96875), Angle(0, -140.84886169434, 0)},
			{Vector(-7578.3618164063, -499.21182250977, -111.96875), Angle(0, -99.012474060059, 0)},
			{Vector(-7572.40625, -679.81262207031, -111.96875), Angle(0, 94.204612731934, 0)},
			{
				{Vector(-7714.9985351563, -723.55157470703, -111.96875), Angle(0, 122.7914276123, 0)},
				{Vector(-7801.720703125, -665.853515625, -111.96875), Angle(0, -8.0172605514526, 0)},
				{Vector(-7718.5712890625, -588.35461425781, -111.96875), Angle(0, -82.77661895752, 0)},
			},
			{Vector(-8127.7724609375, -623.67376708984, -111.96875), Angle(0, 105.76798248291, 0)},
			{Vector(-8425.11328125, 286.05364990234, -111.96875), Angle(0, 87.524696350098, 0)},
			{Vector(-8396.0625, 529.66033935547, -111.96875), Angle(0, -84.493072509766, 0)},
			{Vector(-8580.263671875, 226.06448364258, -111.96875), Angle(0, -21.683382034302, 0)},
			{Vector(-8793.1796875, 176.99395751953, -111.96875), Angle(0, -0.17805409431458, 0)},
			{Vector(-8854.880859375, 118.68499755859, -111.96875), Angle(0, 80.041648864746, 0)},
			{Vector(-8854.025390625, 267.60992431641, -111.96875), Angle(0, -71.323883056641, 0)},
			{
				{Vector(-8736.7607421875, 366.37405395508, -111.96875), Angle(0, 161.54598999023, 0)},
				{Vector(-8830.6923828125, 384.79254150391, -111.96875), Angle(0, 2.9534838199615, 0)},
			},
			{Vector(-8819.521484375, 483.25543212891, -111.96875), Angle(0, -24.750059127808, 0)},
			{Vector(-8670.80078125, 510.19555664063, -111.96875), Angle(0, -42.496307373047, 0)},
			{Vector(-8563.763671875, 535.87609863281, -111.96875), Angle(0, -92.121643066406, 0)},
			{Vector(-8593.6953125, 744.7939453125, -111.96875), Angle(0, 81.165557861328, 0)},
			{Vector(-8642.3974609375, 1044.4052734375, -111.96875), Angle(0, -34.707412719727, 0)},

		},
		items = { --loot spawn list
			--{"loottableid", vector},
			{"trashrun", Vector(-8138.2797851563, 1491.0173339844, -78.312477111816)},
			{"trashrun", Vector(-8100.3759765625, 1481.7517089844, -78.362228393555)},
			{"trashrun", Vector(-8025.400390625, 1474.9924316406, -41.787517547607)},
			{"trashrunrare", Vector(-7988.3212890625, 1566.2376708984, -66.255981445313)},
			{"trashrunrare", Vector(-8001.0908203125, 1612.1623535156, -102.67830657959)},
			{"tier1", Vector(-8036.4594726563, 1644.296875, -111.96875)},
			{"trashrun", Vector(-8258.994140625, 1656.9213867188, -76.670516967773)},
			{"trashrun", Vector(-8106.755859375, 1484.9682617188, -111.96875)},
			{"trashrun", Vector(-7788.544921875, 1467.8583984375, -95.276802062988)},
			{"trashrunrare", Vector(-7785.2114257813, 1558.5346679688, -111.96875)},
			{"trashrun", Vector(-7533.0366210938, 1692.21875, -151.96875)},
			{"tier2", Vector(-7537.3618164063, 1605.2087402344, -151.96875)},
			{"trashrun", Vector(-7739.2646484375, 927.84765625, -71.939041137695)},
			{"trashrun", Vector(-7577.2084960938, 987.27276611328, -111.96875)},
			{"trashrun", Vector(-7768.2412109375, 1222.9390869141, -111.96875)},
			{"trashrun", Vector(-7815.3212890625, 1227.9000244141, -111.96875)},
			{"trashrun", Vector(-8023.1997070313, 993.90533447266, -111.96875)},
			{"trashrun", Vector(-7881.140625, 822.79949951172, -111.96875)},
			{"trashrun", Vector(-8096.8520507813, 807.41162109375, -111.96875)},
			{"trashrun", Vector(-7780.6098632813, 719.37738037109, -111.96875)},
			{"trashrunrare", Vector(-7672.8979492188, 542.49505615234, -62.8837890625)},
			{"trashrunrare", Vector(-7839.2138671875, 710.7470703125, -111.96875)},
			{"trashrun", Vector(-7909.4443359375, 298.35125732422, -111.96875)},
			{"trashrun", Vector(-7569.5693359375, 445.4850769043, -111.96875)},
			{"trashrun", Vector(-7730.009765625, 341.90438842773, -111.96875)},
			{"trashrunrare", Vector(-7663.783203125, -524.03875732422, -64.132690429688)},
			{"tier1", Vector(-7761.2666015625, -439.06802368164, -111.96875)},
			{"trashrun", Vector(-7953.2724609375, -593.32116699219, -63.655693054199)},
			{"tier1", Vector(-8046.4399414063, -702.99945068359, -111.96875)},
			{"trashrun", Vector(-8025.7670898438, -388.14807128906, -63.655696868896)},
			{"trashrun", Vector(-7933.6323242188, -389.17416381836, -63.655689239502)},
			{"trashrunrare", Vector(-8708.638671875, -182.99749755859, -111.96875)},
			{"trashrun", Vector(-8714.19921875, 7.2875671386719, -111.96875)},
			{"trashrun", Vector(-8436.609375, 203.18960571289, -76.384033203125)},
			{"trashrun", Vector(-8491.689453125, 188.5573425293, -76.391380310059)},
			{"trashrunrare", Vector(-8477.359375, 198.2240447998, -101.75357055664)},
			{"trashrun", Vector(-8604.0947265625, 271.28021240234, -94.10277557373)},
			{"tier1", Vector(-8654.0126953125, 285.11065673828, -87.501281738281)},
			{"trashrun", Vector(-8554.283203125, 456.61895751953, -67.553779602051)},
			{"trashrun", Vector(-8655.6826171875, 499.701171875, -111.96875)},
			{"trashrunrare", Vector(-8838.66796875, 341.37329101563, -111.96875)},
			{"trashrun", Vector(-8859.1708984375, 473.61776733398, -85.519165039063)},
			{"tier1", Vector(-8856.96875, 553.04296875, -85.519165039063)},
			{"tier1", Vector(-8852.015625, 504.73599243164, -53.477310180664)},
			{"tier1", Vector(-8750.345703125, 571.75262451172, -85.55322265625)},
			{"tier1", Vector(-8800.6044921875, 568.91107177734, -53.511367797852)},
			{"trashrun", Vector(-8713.576171875, 574.97711181641, -85.55322265625)},
			{"trashrun", Vector(-8539.7080078125, 581.15112304688, -111.96875)},
			{"trashrunrare", Vector(-8500.9873046875, 462.14096069336, -111.96875)},
			{"trashrun", Vector(-8449.6025390625, 467.62219238281, -71.755958557129)},
			{"trashrun", Vector(-8407.935546875, 490.89141845703, -111.96875)},
			{"trashrun", Vector(-8511.724609375, 918.47955322266, -63.441383361816)},
			{"trashrunrare", Vector(-8511.35546875, 1091.4060058594, -111.96875)},
			{"tier1", Vector(-8825.978515625, -399.666015625, -111.96875)},
		},
		events = { --rng events
			[1] = {
				name = "reinforcements", --name of event,
				valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
				func = function(id)
					local run = PLUGIN.curRuns[id]
					local diff = run.diff or 0
					local def = PLUGIN.areas[run.area]
					local players = run.players

					if(!players or #players == 0) then return end

					defaultreinforcements(run, def, diff)
				end, --id being the id of the run in curRuns, function ran when event is picked,
				max = 1, --amount of times this event can be chosen per run,
			},--]]
			[2] = {
			name = "nothing", --name of event,
			valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
			func = function(id)
			--	local run = PLUGIN.curRuns[id]

			end, --id being the id of the run in curRuns, function ran when event is picked,
			max = 4, --amount of times this event can be chosen per run,
			},

		},
		playerspawns = { --tables of tables of player spawns
			{
				{Vector(-8763.5107421875, 1664.4211425781, -111.96875), Angle(0, -0.19265314936638, 0)},
				{Vector(-8688.98046875, 1664.1701660156, -111.96875), Angle(0, -0.19265314936638, 0)},
				{Vector(-8620.53125, 1663.9396972656, -111.96875), Angle(0, -0.67445307970047, 0)},
				{Vector(-8550.9072265625, 1663.6091308594, -111.96875), Angle(0, -0.35325318574905, 0)},
			},
			{
				{Vector(-8838.892578125, -334.18746948242, -111.96875), Angle(0, 1.0622656345367, 0)},
				{Vector(-8785.341796875, -310.32473754883, -111.96875), Angle(0, 1.0622656345367, 0)},
				{Vector(-8784.439453125, -358.18283081055, -111.96875), Angle(0, 1.0622656345367, 0)},
				{Vector(-8737.8583984375, -336.3844909668, -111.96875), Angle(0, 1.0622656345367, 0)},
			}
		},
		center = Vector(-8093.33203125, 530.35144042969, -111.96875),--the general center of the area
		centerrange = 2000, --the general length to encapsulate the entire area into a circle
		maxply = 4, --max player count
	},
	[3] = { --todo
		name = function() return "Bunker" end,
		objectives = {
			[1] = {
				name = function() return "Kill All" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override) 
				end,
				]]
				onTravel = defaultkillalltravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultkillallfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[2] = {
				name = function() return "Collect Item" end,
				desc = function() return "collect a particular item, details will be sent via pm on accept. when you get back with the item, turn the objective into the red drop box to complete the run. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]
					
					
					local targ = def.objlist[1][math.random(#def.objlist[1])]

					run.objdef = targ

					local msg = "The item you are looking for is a "..targ.name.."."
					timer.Simple(0, function()
					netstream.Start(run.players, "fakepdapm", "from AUTOREPLY: "..msg)
					end)

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultcollecttravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultcollectfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[3] = {
				name = function() return "Kill Target" end,
				desc = function() return "kill a specific target in the area, details will be forwarded via autoreply on acceptance. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					defaulttargetsetup(run)

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaulttargettravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaulttargetfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[4] = {
				name = function() return "Kill All (VR)" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override, disable item spawning) 
				end,
				]]
				onTravel = function(run, diff)
					defaultkillalltravel(run, diff, nil, {"npc_vj_sky_rebel"}, true)
				end, --id being the id of the run in curRuns, ran on travelled,
				onFinish = function(run, diff)
					defaultkillallfinish(run, diff, {
						[1] = {"", {20,30}},
						[2] = {"", {40,60}},
						[3] = {"", {60,90}},
						[4] = {"", {80,120}}
					})
				end, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
				cmb = true,
			},
			--[[ --there are currently none setup for this
			[4] = {
				name = function() return "Defend Machine" end,
				desc = function() return "find, activate, and defend a machine. mission is complete when its finished running. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultwavetravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultwavefinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			]]
		},
		waveSpawns = { --idk if ill do waves yet but might as well do them
			--[[
				{vector, angle},
			]]

		},
		serverlist = { --props with chance to spawn
			--[[
			{
				class = "prop_physics", --class
				model = "models/props_junk/wood_crate002a.mdl", --model
				randomskin = true, --if true then random skin, otherwise comment and use
				--skin = 0,
				pos = Vector(8167.5, 8756.5, 608.46875), --pos to spawn at
				angle = Angle(-0.1318359375, 12.392578125, -0.087890625), --angle to spawn at
				--motion = true, --if true, starts unfrozen
				other = { --these will guarantee spawn with this
					{
						class = "prop_physics",
						model = "models/props_junk/wood_crate001a_damaged.mdl",
						randomskin = true,
						pos = Vector(8172.65625, 8774.96875, 648.75),
						angle = Angle(-0.0439453125, -13.53515625, 0),
						motion = true,
					},
				}
			},
			]]
			{
				class = "prop_physics",
				model = "models/props_wasteland/cargo_container01.mdl",
				randomskin = true,
				pos = Vector(-4906.4829101563, 655.09368896484, -1724.4844970703),
				angle = Angle(-0.02197265625, -41.539306640625, 0),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/cargo_container01.mdl",
				randomskin = true,
				pos = Vector(-4428.857421875, 561.11535644531, -1724.3979492188),
				angle = Angle(-0.1263427734375, -21.697998046875, 0.0439453125),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/crate_stackmill.mdl",
				skin = 0,
				pos = Vector(-4358.7465820313, 1002.6880493164, -1787.7797851563),
				angle = Angle(0.0384521484375, 15.847778320313, 0.1483154296875),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/crate_extralargemill.mdl",
				skin = 0,
				pos = Vector(-4254.6049804688, 744.24975585938, -1785.5349121094),
				angle = Angle(0.0164794921875, 42.379760742188, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/cargo_container01c.mdl",
				skin = 0,
				pos = Vector(-3849.8701171875, 351.83270263672, -1725.2001953125),
				angle = Angle(-0.0384521484375, 97.750854492188, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_large.mdl",
				skin = 0,
				pos = Vector(-3965.7248535156, 465.4104309082, -1785.5655517578),
				angle = Angle(-0.0274658203125, 35.128784179688, 0.0274658203125),
				other = {
					{
						class = "prop_physics",
						model = "models/props/de_nuke/crate_extrasmall.mdl",
						skin = 0,
						pos = Vector(-3872.0390625, 451.85992431641, -1785.31640625),
						angle = Angle(-0.10986328125, 24.307250976563, -0.032958984375),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_street/trash_compactor.mdl",
				randomskin = true,
				pos = Vector(-3295.4997558594, 899.73120117188, -1785.6375732422),
				angle = Angle(0, 89.989013671875, -0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(-2733.6384277344, 597.48114013672, -1785.4343261719),
				angle = Angle(0.010986328125, -0.10986328125, 0),
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001_explosive.mdl",
				skin = 0,
				pos = Vector(-2686.7900390625, 580.09515380859, -1785.5677490234),
				angle = Angle(0.0274658203125, 54.629516601563, 0.0933837890625),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/fourbyeigth.mdl",
				randomskin = true,
				pos = Vector(-2897.0456542969, 547.50305175781, -1721.7142333984),
				angle = Angle(-88.319091796875, 0.15380859375, -90.15380859375),
			},{
				class = "prop_physics",
				model = "models/nt/props_office/filecabinet_three.mdl",
				randomskin = true,
				pos = Vector(-2987.8767089844, 539.02740478516, -1785.490234375),
				angle = Angle(0.0604248046875, 89.928588867188, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(-3029.9357910156, 494.01739501953, -1763.0054931641),
				angle = Angle(-0.098876953125, 0.02197265625, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_storagecloset001a.mdl",
				skin = 0,
				pos = Vector(-2759.1840820313, 413.63226318359, -1760.806640625),
				angle = Angle(0.2142333984375, -158.40087890625, -90),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_storagecloset001a.mdl",
				skin = 0,
				pos = Vector(-2648.0153808594, 294.93096923828, -1760.8347167969),
				angle = Angle(-0.06591796875, -113.45031738281, 89.994506835938),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(-2868.5146484375, 305.93664550781, -1785.5037841797),
				angle = Angle(-0.06591796875, -130.29235839844, 0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_large.mdl",
				randomskin = true,
				pos = Vector(-3005.8647460938, 200.67747497559, -1785.5130615234),
				angle = Angle(0.0054931640625, 76.9482421875, 0.0274658203125),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_small.mdl",
						randomskin = true,
						pos = Vector(-2953.7133789063, 185.50088500977, -1785.6398925781),
						angle = Angle(-0.0494384765625, 90.049438476563, -0.054931640625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/cementbags01.mdl",
				skin = 0,
				pos = Vector(-2299.0339355469, 773.45629882813, -1770.6700439453),
				angle = Angle(0.032958984375, -179.47265625, -0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/barrier_conc.mdl",
				skin = 0,
				pos = Vector(-2475.9790039063, 1002.4296875, -1785.6654052734),
				angle = Angle(0.1373291015625, 81.227416992188, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/barrier_conc.mdl",
				skin = 0,
				pos = Vector(-2460.4736328125, 1080.5098876953, -1785.87890625),
				angle = Angle(0.3131103515625, -93.526611328125, 0),
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001.mdl",
				randomskin = true,
				pos = Vector(-2387.7158203125, 941.22668457031, -1785.5736083984),
				angle = Angle(0.2252197265625, 99.288940429688, 0.19775390625),
				motion = true,
				other = {
					{
						class = "prop_physics",
						model = "models/props_c17/oildrum001.mdl",
						randomskin = true,
						pos = Vector(-2326.5200195313, 959.87707519531, -1771.8026123047),
						angle = Angle(78.013916015625, 39.04541015625, -90.016479492188),
						motion = true,
					},{
						class = "prop_physics",
						model = "models/props_c17/oildrum001_explosive.mdl",
						skin = 0,
						pos = Vector(-2356.3940429688, 950.52954101563, -1785.5875244141),
						angle = Angle(0.2142333984375, 115.80139160156, 0.406494140625),
						motion = true,
					},
				}
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/shelves.mdl",
				skin = 0,
				pos = Vector(-2337.8112792969, 1269.4318847656, -1736.3189697266),
				angle = Angle(0, 0, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/table_shed.mdl",
				skin = 0,
				pos = Vector(-2299.5341796875, 1393.91796875, -1784.5791015625),
				angle = Angle(-0.0164794921875, -178.59924316406, -1.2689208984375),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/fourbyeigth.mdl",
				skin = 0,
				pos = Vector(-2274.48828125, 1494.3797607422, -1720.8084716797),
				angle = Angle(84.171752929688, 90, -90.010986328125),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/fourbyeigth.mdl",
				skin = 0,
				pos = Vector(-2275.4873046875, 1044.8505859375, -1719.1351318359),
				angle = Angle(-83.325805664063, 89.873657226563, 90.126342773438),
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(-2310.587890625, 1574.1298828125, -1762.8896484375),
				angle = Angle(0, -95.278930664063, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/crate_stackmill.mdl",
				skin = 0,
				pos = Vector(-2227.5786132813, 824.36218261719, -1787.685546875),
				angle = Angle(0, -90.999755859375, 0),
			},{
				class = "prop_physics",
				model = "models/props_c17/furnituretable002a.mdl",
				skin = 0,
				pos = Vector(-1848.8161621094, 1161.7016601563, -1767.7513427734),
				angle = Angle(-84.237670898438, -41.30859375, 0.142822265625),
			},{
				class = "prop_physics",
				model = "models/props_c17/furnituretable002a.mdl",
				skin = 0,
				pos = Vector(-1802.4503173828, 1249.3123779297, -1767.4868164063),
				angle = Angle(85.01220703125, 157.1923828125, 0.87890625),
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(-1653.2172851563, 1208.8835449219, -1763.0456542969),
				angle = Angle(-0.0164794921875, -89.983520507813, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/food_stack.mdl",
				skin = 0,
				pos = Vector(-1618.0925292969, 1262.3422851563, -1785.3503417969),
				angle = Angle(0, 0.7525634765625, -0.3900146484375),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/footlocker01_closed.mdl",
				skin = 0,
				pos = Vector(-1804.2225341797, 1442.8323974609, -1773.5614013672),
				angle = Angle(-0.17578125, 93.510131835938, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(-2139.4487304688, 2476.1687011719, -1641.4774169922),
				angle = Angle(-0.0054931640625, -111.29699707031, 0.010986328125),
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001.mdl",
				randomskin = true,
				pos = Vector(-2375.9265136719, 2461.8312988281, -1627.8616943359),
				angle = Angle(31.9482421875, 71.630859375, 90.0439453125),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/props_c17/oildrum001_explosive.mdl",
				skin = 0,
				pos = Vector(-2337.9816894531, 2478.4743652344, -1641.5766601563),
				angle = Angle(0.3021240234375, -4.5977783203125, -0.3076171875),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/props/de_prodigy/prodcratesa.mdl",
				skin = 0,
				pos = Vector(-2214.8957519531, 2739.1416015625, -1589.4846191406),
				angle = Angle(-0.0054931640625, -149.91943359375, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_prodigy/prodcratesb.mdl",
				skin = 0,
				pos = Vector(-2622.81640625, 2402.8203125, -1605.4649658203),
				angle = Angle(0.032958984375, 167.81066894531, -0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/props/de_prodigy/prodcratesb.mdl",
				skin = 0,
				pos = Vector(-2646.0979003906, 2261.0595703125, -1605.5513916016),
				angle = Angle(0.1593017578125, -169.52453613281, -0.032958984375),
			},{
				class = "prop_physics",
				model = "models/props/de_prodigy/prodcratesb.mdl",
				skin = 0,
				pos = Vector(-2593.5541992188, 2860.3781738281, -1605.4816894531),
				angle = Angle(0.0274658203125, 165.73425292969, -0.010986328125),
			},
		},
		enemies = { --table of tables of enemies
			--[[
				{"npc class",},
			]]
			{"npc_vj_sky_mp"}, --temp
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_helix",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_citizen",
			},
			{
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},

		},
		objlist = { --collect item objs
			{ --objs
				--[[
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				]]
				--default example ones
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				{
					name = "Small Cache",
					desc = "A small plastic green container with 'GEOSTASH' on it. Quick check inside reveals that there's actually nothing in it.",
					model = "models/props_clutter/geo_cache_001.mdl",
				},
				{
					name = "Dossier",
					desc = "A dossier of some kind.",
					model = "models/stalker/item/handhelds/files4.mdl",
				},
				{
					name = "Journal",
					desc = "A journal of some kind.",
					model = "models/props_lab/bindergraylabel01a.mdl",
				},
			},
			{ --spawn positions
				--vectors
				Vector(-3547.6574707031, 1023.8630371094, -1785.96875),
				Vector(-3274.9177246094, 294.48876953125, -1785.96875),
				Vector(-3026.6669921875, 408.99963378906, -1785.96875),
				Vector(-2788.7141113281, 512.26776123047, -1755.2584228516),
				Vector(-2278.9621582031, 1078.1776123047, -1749.96875),
				Vector(-2676.7419433594, 875.97589111328, -1721.6079101563),
				Vector(-2257.0114746094, 1489.3033447266, -1749.96875),
				Vector(-1902.1083984375, 1009.2896118164, -1754.9630126953),
				Vector(-1631.5198974609, 1207.9888916016, -1785.96875),
				Vector(-1852.0617675781, 1401.8234863281, -1730.0572509766),
				Vector(-1483.2645263672, 1384.8646240234, -1730.2596435547),
				Vector(-1647.2696533203, 1538.0919189453, -1785.96875),
				Vector(-1923.1474609375, 1538.9560546875, -1774.5251464844),
				Vector(-2256.2961425781, 1462.6750488281, -1749.96875),
				Vector(-2577.9245605469, 2442.1398925781, -1593.96875),
				Vector(-2593.6276855469, 2786.6306152344, -1608.3648681641),
				Vector(-2799.8798828125, 2164.9416503906, -1657.96875),
			}
		},
		enemySpawns = { --possible enemy spawns
			--{vector, angle} or tables of these to spawn them all at once
			{Vector(-4676.6083984375, 552.28540039063, -1785.96875), Angle(0, 38.124530792236, 0)},
			{Vector(-4679.0625, 725.01550292969, -1785.96875), Angle(0, 10.019533157349, 0)},
			{Vector(-4790.9130859375, 527.2216796875, -1785.96875), Angle(0, -101.61259460449, 0)},
			{Vector(-5098.6928710938, 351.1208190918, -1785.96875), Angle(0, 25.437103271484, 0)},
			{Vector(-4928.8999023438, 943.30944824219, -1785.96875), Angle(0, -9.3327884674072, 0)},
			{Vector(-4345.8725585938, 889.72283935547, -1785.96875), Angle(0, -53.176582336426, 0)},
			{Vector(-4126.6967773438, 933.29382324219, -1785.96875), Angle(0, -98.626388549805, 0)},
			{Vector(-3802.4118652344, 670.61566162109, -1785.96875), Angle(0, -155.07736206055, 0)},
			{Vector(-3774.7763671875, 484.84088134766, -1785.96875), Angle(0, 45.190872192383, 0)},
			{Vector(-3515.2299804688, 301.21319580078, -1785.96875), Angle(0, 157.38505554199, 0)},
			{Vector(-3326.9797363281, 572.40863037109, -1785.96875), Angle(0, 167.74368286133, 0)},
			{Vector(-3305.2631835938, 726.70166015625, -1785.96875), Angle(0, -164.71369934082, 0)},
			{Vector(-2642.8400878906, 690.44818115234, -1785.96875), Angle(0, -169.45129394531, 0)},
			{Vector(-2296.689453125, 606.11535644531, -1785.96875), Angle(0, 171.83866882324, 0)},
			{Vector(-2644.2077636719, 225.73701477051, -1785.96875), Angle(0, 91.458404541016, 0)},
			{Vector(-2578.7600097656, 419.70834350586, -1785.96875), Angle(0, -169.85282897949, 0)},
			{Vector(-2805.6823730469, 383.78012084961, -1785.96875), Angle(0, 35.08797454834, 0)},
			{Vector(-2963.2854003906, 476.50347900391, -1785.96875), Angle(0, 8.7495794296265, 0)},
			{Vector(-2926.3015136719, 247.05378723145, -1785.96875), Angle(0, 85.275466918945, 0)},
			{Vector(-2531.8876953125, 865.28308105469, -1785.96875), Angle(0, -86.968078613281, 0)},
			{Vector(-2480.7194824219, 1015.0575561523, -1785.96875), Angle(0, -101.82359313965, 0)},
			{Vector(-2333.3583984375, 1066.0676269531, -1785.96875), Angle(0, 60.703609466553, 0)},
			{Vector(-2482.0478515625, 1192.6428222656, -1785.96875), Angle(0, -86.581657409668, 0)},
			{Vector(-2664.0930175781, 981.33947753906, -1785.96875), Angle(0, -61.608280181885, 0)},
			{Vector(-2290.03125, 1190.3780517578, -1785.96875), Angle(0, -118.38056945801, 0)},
			{
				{Vector(-2433.4777832031, 1468.6254882813, -1785.96875), Angle(0, -67.37508392334, 0)},
				{Vector(-2400.640625, 1377.4995117188, -1785.96875), Angle(0, 140.2957611084, 0)},
			},
			{Vector(-2211.2028808594, 763.05908203125, -1785.96875), Angle(0, -112.42366790771, 0)},
			{Vector(-1888.0690917969, 752.27563476563, -1785.96875), Angle(0, -173.05010986328, 0)},
			{Vector(-1681.3558349609, 674.22204589844, -1785.96875), Angle(0, 176.91236877441, 0)},
			{Vector(-1525.4105224609, 729.91815185547, -1785.96875), Angle(0, -178.67120361328, 0)},
			{Vector(-2212.4992675781, 994.31127929688, -1785.96875), Angle(0, -79.565673828125, 0)},
			{Vector(-2146.294921875, 1184.1628417969, -1785.96875), Angle(0, -91.851669311523, 0)},
			{Vector(-2140.7419433594, 1505.81640625, -1785.96875), Angle(0, 90.750564575195, 0)},
			{Vector(-1958.4182128906, 1209.5607910156, -1785.96875), Angle(0, 119.49787139893, 0)},
			{Vector(-1729.1618652344, 1390.0487060547, -1785.96875), Angle(0, -172.40773010254, 0)},
			{Vector(-1757.5992431641, 1213.3966064453, -1785.96875), Angle(0, 158.60383605957, 0)},
			{Vector(-1847.8842773438, 991.76483154297, -1785.96875), Angle(0, 119.97939300537, 0)},
			{Vector(-1628.0438232422, 1114.4075927734, -1785.96875), Angle(0, 145.27397155762, 0)},
			{Vector(-1532.7379150391, 969.73071289063, -1785.96875), Angle(0, 146.87994384766, 0)},
			{Vector(-1625.775390625, 1429.2504882813, -1785.96875), Angle(0, -107.6058807373, 0)},
			{Vector(-1495.4458007813, 1262.5875244141, -1785.96875), Angle(0, 147.68283081055, 0)},
			{Vector(-1582.9617919922, 1555.5549316406, -1785.96875), Angle(0, -113.94964599609, 0)},
			{Vector(-1726.7458496094, 1601.4857177734, -1785.96875), Angle(0, -96.765426635742, 0)},
			{Vector(-1846.6276855469, 1616.0338134766, -1785.96875), Angle(0, -55.9729347229, 0)},
			{Vector(-2039.3525390625, 1564.7121582031, -1785.96875), Angle(0, -14.297202110291, 0)},
			{Vector(-1927.8189697266, 1491.1861572266, -1785.96875), Angle(0, 11.07759475708, 0)},
			{Vector(-2431.6271972656, 2286.86328125, -1657.96875), Angle(0, -25.7799243927, 0)},
			{Vector(-2747.6633300781, 2216.2136230469, -1657.96875), Angle(0, -3.7125799655914, 0)},
			{Vector(-2714.2546386719, 2341.2348632813, -1657.96875), Angle(0, 3.0326399803162, 0)},
			{Vector(-2505.1516113281, 2330.6320800781, -1657.96875), Angle(0, 179.94863891602, 0)},
			{Vector(-2780.2338867188, 2631.4855957031, -1657.96875), Angle(0, -31.320568084717, 0)},
			{Vector(-2697.7312011719, 2931.4404296875, -1657.96875), Angle(0, -90.903213500977, 0)},
			{Vector(-2532.4587402344, 2946.6889648438, -1657.96875), Angle(0, -47.380577087402, 0)},
			{Vector(-2349.49609375, 2766.04296875, -1641.96875), Angle(0, 146.62431335449, 0)},
			{Vector(-2180.6171875, 2625.6076660156, -1641.96875), Angle(0, -105.61305999756, 0)},
			{Vector(-2145.6022949219, 2541.8825683594, -1641.96875), Angle(0, 148.23025512695, 0)},
			{Vector(-2390.7209472656, 2610.146484375, -1641.96875), Angle(0, -58.477024078369, 0)},
			{Vector(-2432.1604003906, 2476.1098632813, -1641.96875), Angle(0, 44.467552185059, 0)},
			{Vector(-2531.9799804688, 2648.1999511719, -1641.96875), Angle(0, -175.00743103027, 0)},
		},
		items = { --loot spawn list
			--{"loottableid", vector},
			{"trashrun", Vector(-4447.1381835938, 290.98547363281, -1785.96875)},
			{"trashrun", Vector(-4608.798828125, 879.96820068359, -1763.4090576172)},
			{"trashrunrare",Vector(-3938.6345214844, 998.4296875, -1749.6887207031)},
			{"trashrun", Vector(-3934.4079589844, 939.68371582031, -1749.6887207031)},
			{"trashrun", Vector(-3931.380859375, 991.37622070313, -1785.96875)},
			{"tier1", Vector(-3800.6337890625, 1006.3106689453, -1759.7650146484)},
			{"trashrunrare", Vector(-3799.1950683594, 932.05914306641, -1727.7232666016)},
			{"trashrun", Vector(-3694.2514648438, 931.26312255859, -1759.7650146484)},
			{"trashrun", Vector(-3693.5603027344, 1012.419128418, -1759.7651367188)},
			{"trashrunrare", Vector(-3693.1569824219, 960.18896484375, -1727.7232666016)},
			{"trashrun", Vector(-3896.0610351563, 492.24768066406, -1785.96875)},
			{"trashrun", Vector(-3862.2727050781, 462.90368652344, -1737.4267578125)},
			{"trashrunrare", Vector(-3654.8493652344, 999.11065673828, -1785.96875)},
			{"trashrunrare", Vector(-2924.322265625, 568.701171875, -1749.96875)},
			{"tier1", Vector(-2785.3239746094, 578.06805419922, -1785.96875)},
			{"trashrun", Vector(-2696.4853515625, 522.18359375, -1750.2287597656)},
			{"trashrun", Vector(-2673.6501464844, 306.27359008789, -1736.0451660156)},
			{"tier1", Vector(-2922.9592285156, 541.17083740234, -1749.96875)},
			{"trashrunrare", Vector(-3025.7038574219, 473.01397705078, -1740.3583984375)},
			{"trashrun", Vector(-2999.5708007813, 534.47515869141, -1725.4541015625)},
			{"trashrunrare", Vector(-2945.0615234375, 187.54568481445, -1745.1711425781)},
			{"trashrunrare", Vector(-2816.7983398438, 525.13928222656, -1731.7983398438)},
			{"trashrunrare", Vector(-2618.0231933594, 781.67626953125, -1745.4693603516)},
			{"tier1", Vector(-2689.4624023438, 835.1298828125, -1681.6164550781)},
			{"tier2", Vector(-2702.1650390625, 834.81915283203, -1785.96875)},
			{"trashrunrare", Vector(-2636.7434082031, 827.45611572266, -1785.96875)},
			{"trashrun", Vector(-2314.1960449219, 786.63482666016, -1755.7064208984)},
			{"trashrunrare", Vector(-2403.3142089844, 815.74591064453, -1767.8074951172)},
			{"trashrun", Vector(-2457.546875, 943.68914794922, -1748.7796630859)},
			{"tier1", Vector(-2284.4567871094, 1030.6226806641, -1749.96875)},
			{"trashrunrare", Vector(-2377.6779785156, 1128.88671875, -1785.96875)},
			{"trashrun", Vector(-2562.7512207031, 1087.3720703125, -1785.96875)},
			{"tier1", Vector(-2617.8466796875, 1107.0266113281, -1785.96875)},
			{"tier1", Vector(-2611.2873535156, 1172.1126708984, -1785.96875)},
			{"trashrun", Vector(-2422.9052734375, 1161.7294921875, -1785.96875)},
			{"trashrunrare", Vector(-2546.8068847656, 1308.3869628906, -1753.4135742188)},
			{"trashrun", Vector(-2648.6450195313, 1294.7385253906, -1775.1173095703)},
			{"trashrun", Vector(-2650.66796875, 1555.728515625, -1753.4135742188)},
			{"tier1", Vector(-2647.4526367188, 1554.353515625, -1775.1173095703)},
			{"trashrun", Vector(-2405.7333984375, 1553.7960205078, -1753.4135742188)},
			{"trashrun", Vector(-2331.5173339844, 1574.1212158203, -1740.2478027344)},
			{"tier1", Vector(-2282.2023925781, 1523.0284423828, -1749.96875)},
			{"trashrunrare", Vector(-2302.0180664063, 1415.3957519531, -1748.9564208984)},
			{"trashrun", Vector(-2331.6767578125, 1278.2113037109, -1755.3914794922)},
			{"tier2", Vector(-2306.5119628906, 1375.1850585938, -1775.2181396484)},
			{"tier1", Vector(-2258.8374023438, 1067.3547363281, -1749.96875)},
			{"trashrunrare", Vector(-2032.4554443359, 1210.0554199219, -1769.1064453125)},
			{"trashrunrare", Vector(-2023.3477783203, 1144.4781494141, -1785.96875)},
			{"trashrun", Vector(-1897.3873291016, 1003.5794677734, -1754.9810791016)},
			{"trashrun", Vector(-1656.4748535156, 1015.8551025391, -1754.9437255859)},
			{"trashrunrare", Vector(-1637.1948242188, 1212.2203369141, -1740.4047851563)},
			{"tier1", Vector(-1496.1181640625, 1204.0104980469, -1785.96875)},
			{"trashrun", Vector(-1539.4213867188, 1259.798828125, -1785.96875)},
			{"trashrun", Vector(-1638.9083251953, 1475.6857910156, -1738.9219970703)},
			{"trashrun", Vector(-1494.3175048828, 1609.9776611328, -1753.4135742188)},
			{"trashrunrare", Vector(-1497.376953125, 1483.748046875, -1774.8371582031)},
			{"tier1", Vector(-1792.0163574219, 1444.7326660156, -1761.4909667969)},
			{"trashrun", Vector(-1902.4780273438, 1443.7409667969, -1785.96875)},
			{"tier1", Vector(-1975.5119628906, 1573.6528320313, -1745.7094726563)},
			{"trashrun", Vector(-1896.1314697266, 1565.1522216797, -1745.7094726563)},
			{"tier1", Vector(-1932.3302001953, 1550.9992675781, -1745.7094726563)},
			{"trashrun", Vector(-2098.7131347656, 2409.0151367188, -1657.96875)},
			{"trashrun", Vector(-2378.4995117188, 2440.73828125, -1593.96875)},
			{"trashrunrare", Vector(-2571.7998046875, 2427.14453125, -1657.96875)},
			{"trashrunrare", Vector(-2691.1716308594, 2234.1821289063, -1657.96875)},
			{"trashrun", Vector(-2181.8996582031, 2802.208984375, -1601.2996826172)},
			{"tier1", Vector(-2174.5590820313, 2694.0302734375, -1641.96875)},
			{"trashrun", Vector(-2123.697265625, 2527.0930175781, -1641.96875)},
			{"tier2", Vector(-2589.4929199219, 2534.6806640625, -1608.3648681641)},
			{"trashrun", Vector(-2586.2185058594, 2657.0598144531, -1608.3648681641)},
			{"tier2", Vector(-2593.5639648438, 2773.0517578125, -1641.96875)},
		},
		events = { --rng events
			[1] = {
				name = "reinforcements", --name of event,
				valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
				func = function(id)
					local run = PLUGIN.curRuns[id]
					local diff = run.diff or 0
					local def = PLUGIN.areas[run.area]
					local players = run.players

					if(!players or #players == 0) then return end

					defaultreinforcements(run, def, diff)
				end, --id being the id of the run in curRuns, function ran when event is picked,
				max = 1, --amount of times this event can be chosen per run,
			},--]]
			[2] = {
			name = "nothing", --name of event,
			valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
			func = function(id)
			--	local run = PLUGIN.curRuns[id]

			end, --id being the id of the run in curRuns, function ran when event is picked,
			max = 4, --amount of times this event can be chosen per run,
			},

		},
		playerspawns = { --tables of tables of player spawns
			{
				{Vector(-4145.8935546875, -408.38293457031, -1785.96875), Angle(0, 88.362716674805, 0)},
				{Vector(-4229.7236328125, -405.98666381836, -1785.96875), Angle(0, 88.362716674805, 0)},
				{Vector(-4331.1508789063, -403.0871887207, -1785.96875), Angle(0, 88.362716674805, 0)},
				{Vector(-4327.8046875, -286.2678527832, -1785.96875), Angle(0, 88.362716674805, 0)},
				{Vector(-4237.9775390625, -288.83557128906, -1785.96875), Angle(0, 88.362716674805, 0)},
				{Vector(-4133.1469726563, -291.68487548828, -1785.96875), Angle(0, 88.443023681641, 0)},
			}
		},
		center = Vector(-3417.3059082031, 651.21569824219, -1785.96875),--the general center of the area
		centerrange = 2500, --the general length to encapsulate the entire area into a circle
		maxply = 6, --max player count
	},
	[4] = {
		name = function() return "Construction" end,
		objectives = {
			[1] = {
				name = function() return "Kill All" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override) 
				end,
				]]
				onTravel = defaultkillalltravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultkillallfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[2] = {
				name = function() return "Collect Item" end,
				desc = function() return "collect a particular item, details will be sent via pm on accept. when you get back with the item, turn the objective into the red drop box to complete the run. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]
					
					
					local targ = def.objlist[1][math.random(#def.objlist[1])]

					run.objdef = targ

					local msg = "The item you are looking for is a "..targ.name.."."
					timer.Simple(0, function()
					netstream.Start(run.players, "fakepdapm", "from AUTOREPLY: "..msg)
					end)

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultcollecttravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultcollectfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[3] = {
				name = function() return "Kill Target" end,
				desc = function() return "kill a specific target in the area, details will be forwarded via autoreply on acceptance. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					defaulttargetsetup(run)

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaulttargettravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaulttargetfinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			[4] = {
				name = function() return "Kill All (VR)" end,
				desc = function() return "kill all enemies in the area. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function
				end, --id being the id of the run in curRuns, ran on accepted,
				--creating a modified one of these V can be done like:
				--scroll up to the function to see currently available args
				--[[
				onTravel = function(run, diff) 
					defaultkillalltravel(run, diff, enmcount override, enmlist override, disable item spawning) 
				end,
				]]
				onTravel = function(run, diff)
					defaultkillalltravel(run, diff, nil, {"npc_vj_sky_rebel"}, true)
				end, --id being the id of the run in curRuns, ran on travelled,
				onFinish = function(run, diff)
					defaultkillallfinish(run, diff, {
						[1] = {"", {20,30}},
						[2] = {"", {40,60}},
						[3] = {"", {60,90}},
						[4] = {"", {80,120}}
					})
				end, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
				cmb = true,
			},
			--[[ --there are currently none setup for this
			[4] = {
				name = function() return "Defend Machine" end,
				desc = function() return "find, activate, and defend a machine. mission is complete when its finished running. max party: 4" end,
				onAccept = function(id)
					local run = PLUGIN.curRuns[id]
					local def = PLUGIN.areas[run.area]

					propInit(run, def) --added into a seperate function

				end, --id being the id of the run in curRuns, ran on accepted,
				onTravel = defaultwavetravel, --id being the id of the run in curRuns, ran on travelled,
				onFinish = defaultwavefinish, --id being the id of the run in curRuns, return true to fail, ran on traveling back to check if done, return false and string to give cancel option
				--special = true, --if true wont be generated randomly, for storyline
			},
			]]
		},
		waveSpawns = { --idk if ill do waves yet but might as well do them
			--[[
				{vector, angle},
			]]

		},
		serverlist = { --props with chance to spawn
			--[[
			{
				class = "prop_physics", --class
				model = "models/props_junk/wood_crate002a.mdl", --model
				randomskin = true, --if true then random skin, otherwise comment and use
				--skin = 0,
				pos = Vector(8167.5, 8756.5, 608.46875), --pos to spawn at
				angle = Angle(-0.1318359375, 12.392578125, -0.087890625), --angle to spawn at
				--motion = true, --if true, starts unfrozen
				other = { --these will guarantee spawn with this
					{
						class = "prop_physics",
						model = "models/props_junk/wood_crate001a_damaged.mdl",
						randomskin = true,
						pos = Vector(8172.65625, 8774.96875, 648.75),
						angle = Angle(-0.0439453125, -13.53515625, 0),
						motion = true,
					},
				}
			},
			]]
			{
				class = "prop_physics",
				model = "models/props_junk/wood_crate002a.mdl",
				randomskin = true,
				pos = Vector(1498.111328125, 10560.728515625, -174.13442993164),
				angle = Angle(-0.0439453125, 93.526611328125, -0.0054931640625),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/cinderblock_stack.mdl",
				skin = 0,
				pos = Vector(1159.0837402344, 10832.935546875, -316.53704833984),
				angle = Angle(0.10986328125, 87.973022460938, -8.2177734375),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/ncrate_large.mdl",
				randomskin = true,
				pos = Vector(1252.4111328125, 10945.137695313, -302.84878540039),
				angle = Angle(7.7398681640625, 179.9560546875, 0.4833984375),
			},{
				class = "prop_physics",
				model = "models/nt/props_tech/techcartbox1.mdl",
				randomskin = true,
				pos = Vector(1231.7220458984, 10637.14453125, -260.14068603516),
				angle = Angle(0.1043701171875, 21.02783203125, 0.010986328125),
				other = {
					{
						class = "prop_physics",
						model = "models/nt/props_warehouse/ncrate_small.mdl",
						randomskin = true,
						pos = Vector(1243.2580566406, 10696.181640625, -258.07376098633),
						angle = Angle(-0.0274658203125, 175.09460449219, 0.02197265625),
					},
				}
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(1711.1739501953, 11388.015625, -171.46662902832),
				angle = Angle(-0.0933837890625, 89.994506835938, 0),
			},{
				class = "prop_physics",
				model = "models/props_junk/wood_crate002a.mdl",
				randomskin = true,
				pos = Vector(2022.6375732422, 11413.946289063, -174.09248352051),
				angle = Angle(0, 11.398315429688, 0.0054931640625),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(2244.0187988281, 11539.918945313, -194.11541748047),
				angle = Angle(-0.02197265625, 9.085693359375, 0.010986328125),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(1794.1947021484, 11138.954101563, -193.98272705078),
				angle = Angle(0, 102.46398925781, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/scaffoldsection01.mdl",
				skin = 0,
				pos = Vector(1931.7756347656, 11116.27734375, -194.06230163574),
				angle = Angle(0.010986328125, -179.97802734375, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/nt/props_debris/cardboard_boxstack.mdl",
				skin = 0,
				pos = Vector(2067.8891601563, 10947.920898438, -171.62455749512),
				angle = Angle(0.1812744140625, -90.016479492188, -0.02197265625),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_extrasmall.mdl",
				skin = 0,
				pos = Vector(2244.6442871094, 10846.568359375, -193.88973999023),
				angle = Angle(0.0494384765625, 47.296142578125, 0.032958984375),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/sackstack.mdl",
				skin = 0,
				pos = Vector(2186.7463378906, 10998.490234375, -194.18438720703),
				angle = Angle(-0.0494384765625, -90.120849609375, 0.0054931640625),
			},{
				class = "prop_physics",
				model = "models/nt/props_warehouse/wrapped_product.mdl",
				randomskin = true,
				pos = Vector(2307.9438476563, 11004.654296875, -194.14138793945),
				angle = Angle(0, -98.4375, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(1858.8518066406, 10880.916992188, -57.983848571777),
				angle = Angle(0, -70.1806640625, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/shelves.mdl",
				skin = 0,
				pos = Vector(1949.5213623047, 11109.083984375, -3.3905348777771),
				angle = Angle(0, 90, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/footlocker01_closed.mdl",
				skin = 0,
				pos = Vector(1718.8306884766, 11165.305664063, -46.129619598389),
				angle = Angle(0.0384521484375, 88.192749023438, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/fourbyeigth.mdl",
				randomskin = true,
				pos = Vector(1687.4099121094, 11217.288085938, 1.4461549520493),
				angle = Angle(-85.7373046875, 90.335083007813, -90.3076171875),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/scaffoldsection01.mdl",
				skin = 0,
				pos = Vector(1776.0313720703, 11099.784179688, -58.053901672363),
				angle = Angle(0.032958984375, -0.087890625, -0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(2169.2514648438, 10856.379882813, -58.019943237305),
				angle = Angle(0.02197265625, -165.41564941406, -0.087890625),
			},{
				class = "prop_physics",
				model = "models/props_debris/metal_panel01a.mdl",
				skin = 0,
				pos = Vector(2208.89453125, 11207.186523438, -34.187843322754),
				angle = Angle(-0.02197265625, -77.579956054688, -89.060668945313),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_storagecloset001a.mdl",
				skin = 0,
				pos = Vector(2175.6213378906, 10941.821289063, 102.64820098877),
				angle = Angle(0.2471923828125, -157.81860351563, -89.972534179688),
			},{
				class = "prop_physics",
				model = "models/props_junk/wood_crate002a.mdl",
				randomskin = true,
				pos = Vector(2318.0280761719, 10855.515625, 97.92765045166),
				angle = Angle(0, -95.344848632813, 0.0384521484375),
				motion = true,
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(1849.5142822266, 10821.513671875, 77.980445861816),
				angle = Angle(0.0439453125, 89.862670898438, 0.098876953125),
			},{
				class = "prop_physics",
				model = "models/nt/props_street/binbags4.mdl",
				skin = 0,
				pos = Vector(1930.5422363281, 11046.431640625, 77.950859069824),
				angle = Angle(0.0604248046875, -0.0823974609375, -0.0494384765625),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/fourbyeigth.mdl",
				randomskin = true,
				pos = Vector(1688.7729492188, 11216.893554688, 137.39752197266),
				angle = Angle(-84.666137695313, -51.009521484375, 54.212036132813),
			},{
				class = "prop_physics",
				model = "models/props/cs_italy/it_mkt_table2.mdl",
				skin = 0,
				pos = Vector(1716.3671875, 11207.53125, 77.946113586426),
				angle = Angle(0, 2.3455810546875, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_office/shelves_metal.mdl",
				skin = 0,
				pos = Vector(1932.4860839844, 11310.717773438, 77.939018249512),
				angle = Angle(-0.164794921875, 3.44970703125, -0.06591796875),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/barrier_conc.mdl",
				skin = 0,
				pos = Vector(1281.5522460938, 11164.369140625, 77.946060180664),
				angle = Angle(0, -174.8583984375, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/barrier_conc.mdl",
				skin = 0,
				pos = Vector(1223.896484375, 11046.58984375, 77.91007232666),
				angle = Angle(0, 90.807495117188, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/barrier_conc.mdl",
				skin = 0,
				pos = Vector(1067.9924316406, 11050.146484375, 77.629760742188),
				angle = Angle(0.3076171875, 86.737060546875, -0.0164794921875),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/barrier_conc.mdl",
				skin = 0,
				pos = Vector(1033.8927001953, 11097.8671875, 77.940849304199),
				angle = Angle(0, 3.49365234375, 0),
			},{
				class = "prop_physics",
				model = "models/nt/props_construction/barrier_conc.mdl",
				skin = 0,
				pos = Vector(1141.8271484375, 11354.953125, 77.938362121582),
				angle = Angle(-0.06591796875, -179.912109375, 0),
			},{
				class = "prop_physics",
				model = "models/props/de_nuke/crate_small.mdl",
				skin = 0,
				pos = Vector(2138.8503417969, 10519.709960938, -17.985004425049),
				angle = Angle(0.0384521484375, 81.441650390625, -0.0384521484375),
			},{
				class = "prop_physics",
				model = "models/props_c17/concrete_barrier001a.mdl",
				randomskin = true,
				pos = Vector(1814.3623046875, 10966.657226563, 214.12840270996),
				angle = Angle(-0.17578125, 90.28564453125, -0.0274658203125),
			},{
				class = "prop_physics",
				model = "models/props_wasteland/controlroom_storagecloset001a.mdl",
				skin = 0,
				pos = Vector(1830.5205078125, 11251.284179688, 238.69856262207),
				angle = Angle(-0.10986328125, -85.314331054688, -90.027465820313),
			},{
				class = "prop_physics",
				model = "models/props_c17/concrete_barrier001a.mdl",
				randomskin = true,
				pos = Vector(2128.7180175781, 10893.258789063, 214.11645507813),
				angle = Angle(-0.076904296875, 178.20922851563, 0),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/footlocker01_closed.mdl",
				skin = 0,
				pos = Vector(2167.3078613281, 10994.782226563, 225.77439880371),
				angle = Angle(-0.02197265625, -86.044921875, 0.0604248046875),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/shelves_wood.mdl",
				skin = 0,
				pos = Vector(2269.5512695313, 10996.7421875, 213.83885192871),
				angle = Angle(0.28564453125, -90.126342773438, 0.0439453125),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/food_stack.mdl",
				skin = 0,
				pos = Vector(2360.8562011719, 10912.778320313, 213.84580993652),
				angle = Angle(-0.0714111328125, -91.109619140625, 0.0439453125),
			},{
				class = "prop_physics",
				model = "models/props/cs_militia/shelves_wood.mdl",
				skin = 0,
				pos = Vector(2206.4562988281, 10803.567382813, 213.96026611328),
				angle = Angle(-0.0439453125, 89.972534179688, 0),
			},
		},
		enemies = { --table of tables of enemies
			--[[
				{"npc class",},
			]]
			{"npc_vj_sky_mp"}, --temp
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_helix",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},
			{
				"npc_vj_sky_citizen",
			},
			{
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
			},
			{
				"npc_vj_sky_citizen",
				"npc_vj_sky_citizen",
				"npc_vj_sky_rebel",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp",
				"npc_vj_sky_mp_storm",
				"npc_vj_sky_mp_helix",
			},

		},
		objlist = { --collect item objs
			{ --objs
				--[[
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				]]
				--default example ones
				{
					name = "Metal Grey Gas Can",
					desc = "A gas can half-way filled with some liquid. It appears to be sealed.",
					model = "models/props_junk/metalgascan.mdl",
				},
				{
					name = "Small Cache",
					desc = "A small plastic green container with 'GEOSTASH' on it. Quick check inside reveals that there's actually nothing in it.",
					model = "models/props_clutter/geo_cache_001.mdl",
				},
				{
					name = "Dossier",
					desc = "A dossier of some kind.",
					model = "models/stalker/item/handhelds/files4.mdl",
				},
				{
					name = "Journal",
					desc = "A journal of some kind.",
					model = "models/props_lab/bindergraylabel01a.mdl",
				},
			},
			{ --spawn positions
				--vectors
				Vector(1549.3864746094, 10528.474609375, -18.522449493408),
				Vector(1227.8295898438, 11114.104492188, -194.52275085449),
				Vector(1720.3948974609, 11616.48828125, -194.52275085449),
				Vector(2363.0659179688, 10899.337890625, -161.7188873291),
				Vector(2215.9104003906, 10993.1875, -152.12480163574),
				Vector(1941.1571044922, 11097.317382813, -58.522453308105),
				Vector(1986.5836181641, 11174.935546875, -58.522453308105),
				Vector(2175.4479980469, 10789.53515625, -58.522453308105),
				Vector(2371.0268554688, 10856.557617188, 77.477554321289),
				Vector(1991.4661865234, 11248.598632813, 77.477554321289),
				Vector(1929.0538330078, 11320.349609375, 109.01803588867),
				Vector(1755.1446533203, 11386.141601563, -194.52275085449)
			}
		},
		enemySpawns = { --possible enemy spawns
			--{vector, angle} or tables of these to spawn them all at once
			{Vector(1488.1186523438, 10508.625, -194.52275085449), Angle(0, 121.28255462646, 0)},
			{Vector(1471.0024414063, 10960.268554688, -192.52275085449), Angle(0, -149.90550231934, 0)},
			{Vector(1485.1961669922, 10804.401367188, -192.52275085449), Angle(0, 58.794239044189, 0)},
			{Vector(1407.6872558594, 11364.19921875, -190.52275085449), Angle(0, 15.994276046753, 0)},
			{Vector(790.38165283203, 11456.934570313, -194.52275085449), Angle(0, -39.347541809082, 0)},
			{Vector(801.79534912109, 11285.896484375, -194.52275085449), Angle(0, 14.051959991455, 0)},
			{Vector(1156.6580810547, 11343.635742188, -58.522453308105), Angle(0, 12.897819519043, 0)},
			{Vector(1278.8922119141, 11037.373046875, -58.522453308105), Angle(0, 164.35864257813, 0)},
			{Vector(1130.7575683594, 11070.708007813, -58.522453308105), Angle(0, -71.618072509766, 0)},
			{Vector(1027.3087158203, 11033.317382813, -58.522453308105), Angle(0, 16.350574493408, 0)},
			{Vector(1175.7266845703, 10693.8671875, -70.522552490234), Angle(0, 19.080778121948, 0)},
			{Vector(1177.8388671875, 10608.637695313, -70.522552490234), Angle(0, -61.299514770508, 0)},
			{Vector(1335.5405273438, 10381.465820313, -315.33319091797), Angle(0, 92.635772705078, 0)},
			{Vector(957.37005615234, 10405.688476563, -310.0595703125), Angle(0, 26.46861076355, 0)},
			{Vector(1157.8878173828, 10675.313476563, -258.52276611328), Angle(0, 17.956871032715, 0)},
			{Vector(1223.0672607422, 10756.342773438, -258.52276611328), Angle(0, -126.02102661133, 0)},
			{Vector(1337.8365478516, 10822.149414063, -297.92175292969), Angle(0, 145.97018432617, 0)},
			{Vector(1481.8236083984, 10912.923828125, -290.52276611328), Angle(0, -177.01127624512, 0)},
			{Vector(1607.0960693359, 10687.345703125, -194.52275085449), Angle(0, 77.55492401123, 0)},
			{Vector(1963.4173583984, 10674.89453125, -194.52275085449), Angle(0, 175.44067382813, 0)},
			{Vector(1525.4979248047, 11457.716796875, -194.52275085449), Angle(0, -118.79337310791, 0)},
			{Vector(1486.2329101563, 11741.04296875, -194.52275085449), Angle(0, -86.352043151855, 0)},
			{Vector(1689.6899414063, 11553.205078125, -194.52275085449), Angle(0, -169.31660461426, 0)},
			{Vector(1795.9852294922, 11461.500976563, -194.52275085449), Angle(0, 19.709550857544, 0)},
			{Vector(2063.0246582031, 11427.870117188, -194.52275085449), Angle(0, -173.65274047852, 0)},
			{Vector(1996.6895751953, 11580.762695313, -194.52275085449), Angle(0, -32.389995574951, 0)},
			{Vector(2262.0598144531, 11614.727539063, -194.52275085449), Angle(0, -58.487518310547, 0)},
			{Vector(2510.3078613281, 11481.70703125, -194.52275085449), Angle(0, -136.69987487793, 0)},
			{Vector(1921.0526123047, 11305.29296875, -194.52275085449), Angle(0, 169.8854675293, 0)},
			{Vector(1747.1762695313, 11204.828125, -194.52275085449), Angle(0, 47.829444885254, 0)},
			{Vector(1799.2465820313, 11063.228515625, -194.52275085449), Angle(0, 31.127117156982, 0)},
			{Vector(1888.8017578125, 11018.864257813, -194.52275085449), Angle(0, 99.141250610352, 0)},
			{Vector(1767.5805664063, 10921.047851563, -194.52275085449), Angle(0, -29.193292617798, 0)},
			{Vector(2038.5139160156, 10884.498046875, -194.52275085449), Angle(0, 172.93678283691, 0)},
			{Vector(2198.0029296875, 10792.873046875, -194.52275085449), Angle(0, 104.03936767578, 0)},
			{Vector(2309.1298828125, 10879.846679688, -194.52275085449), Angle(0, 177.43367004395, 0)},
			{Vector(2260.8176269531, 10974.790039063, -194.5225982666), Angle(0, -143.2193145752, 0)},
			{Vector(1742.685546875, 10917.016601563, -58.522453308105), Angle(0, -45.910877227783, 0)},
			{Vector(1911.7188720703, 10995.802734375, -58.522453308105), Angle(0, -88.469879150391, 0)},
			{Vector(1814.1282958984, 11161.91796875, -58.522453308105), Angle(0, -76.103393554688, 0)},
			{Vector(1743.5162353516, 11222.010742188, -58.522453308105), Angle(0, 7.5040407180786, 0)},
			{Vector(1883.4149169922, 11313.287109375, -58.522453308105), Angle(0, 122.65440368652, 0)},
			{Vector(1914.0065917969, 11245.602539063, -58.522453308105), Angle(0, -102.6824798584, 0)},
			{Vector(2039.3861083984, 10863.509765625, -58.522453308105), Angle(0, 150.34281921387, 0)},
			{Vector(2141.2956542969, 10925.758789063, -58.522453308105), Angle(0, -174.32516479492, 0)},
			{Vector(2301.5529785156, 10975.959960938, -58.522453308105), Angle(0, -160.27270507813, 0)},
			{Vector(2264.1687011719, 10828.9609375, -58.522453308105), Angle(0, 116.61688995361, 0)},
			{Vector(2180.2514648438, 11106.547851563, -58.522453308105), Angle(0, -62.54732131958, 0)},
			{Vector(2213.6179199219, 11186.791015625, -58.522453308105), Angle(0, 110.33852386475, 0)},
			{Vector(2301.4299316406, 11210.512695313, -58.522453308105), Angle(0, -127.36457824707, 0)},
			{Vector(2479.8955078125, 11295.798828125, -54.272548675537), Angle(0, 144.21020507813, 0)},
			{Vector(1617.6232910156, 10660.360351563, -52.272548675537), Angle(0, 96.110374450684, 0)},
			{Vector(1555.1217041016, 10401.095703125, -18.52244758606), Angle(0, 143.18119812012, 0)},
			{Vector(1648.0393066406, 10558.229492188, -18.52244758606), Angle(0, 105.44040679932, 0)},
			{Vector(2491.4521484375, 11243.944335938, 81.727447509766), Angle(0, 143.80865478516, 0)},
			{Vector(1595.1469726563, 10686.606445313, 81.727447509766), Angle(0, 101.97233581543, 0)},
			{Vector(2254.279296875, 10495.114257813, -18.522449493408), Angle(0, 105.98731994629, 0)},
			{Vector(1511.1331787109, 10391.911132813, 293.4772644043), Angle(0, 139.07090759277, 0)},
			{Vector(2499.0771484375, 10580.346679688, 261.4772644043), Angle(0, 117.71113586426, 0)},
			{Vector(2561.7585449219, 11159.125, 173.4772644043), Angle(0, 135.45753479004, 0)},
			{Vector(1738.7432861328, 10869.409179688, 213.4772644043), Angle(0, -26.362152099609, 0)},
			{Vector(1817.0905761719, 11022.501953125, 213.4772644043), Angle(0, -86.84302520752, 0)},
			{Vector(2046.6921386719, 10861.5859375, 213.4772644043), Angle(0, 161.53985595703, 0)},
			{Vector(2203.7954101563, 10942.655273438, 213.4772644043), Angle(0, -168.90969848633, 0)},
			{Vector(2190.3239746094, 10855.390625, 213.4772644043), Angle(0, 170.45323181152, 0)},
			{Vector(1723.8135986328, 11193.869140625, 213.4772644043), Angle(0, 164.35052490234, 0)},
			{Vector(1824.87109375, 11315.15625, 213.4772644043), Angle(0, -82.090255737305, 0)},
			{Vector(1501.8352050781, 11001.045898438, 79.477447509766), Angle(0, 63.66951751709, 0)},
			{Vector(1228.0526123047, 11021.703125, 77.477554321289), Angle(0, -72.534423828125, 0)},
			{Vector(977.68499755859, 11220.2265625, 77.477554321289), Angle(0, 62.851245880127, 0)},
			{Vector(1262.5754394531, 11233.370117188, 77.477554321289), Angle(0, 30.650953292847, 0)},
			{Vector(1166.9702148438, 11363.721679688, 77.477554321289), Angle(0, 4.7943305969238, 0)},
			{Vector(1137.9339599609, 11638.80859375, 77.477554321289), Angle(0, -85.39769744873, 0)},
			{Vector(1682.017578125, 10785.09375, 349.4772644043), Angle(0, -170.03396606445, 0)},
			{Vector(1678.2596435547, 11350.465820313, 349.4772644043), Angle(0, 162.98536682129, 0)},
			{Vector(1675.2233886719, 10995.077148438, 349.4772644043), Angle(0, 177.35906982422, 0)},
			{Vector(2292.7407226563, 10900.08203125, 213.4772644043), Angle(0, 177.00845336914, 0)},

		},
		items = { --loot spawn list
			--{"loottableid", vector},
			{"trashrun", Vector(1572.8463134766, 11300.938476563, -280.2565612793)},
			{"trashrun", Vector(1730.5224609375, 11180.368164063, -319.97766113281)},
			{"trashrunrare", Vector(2129.0625, 11288.0859375, -301.32696533203)},
			{"trashrunrare", Vector(2277.0905761719, 11238.813476563, -310.16128540039)},
			{"trashrun", Vector(1269.3114013672, 10750.778320313, -258.52276611328)},
			{"trashrun", Vector(1232.8609619141, 10689.9140625, -217.69157409668)},
			{"trashrun", Vector(1168.3507080078, 10563.42578125, -258.52276611328)},
			{"trashrunrare", Vector(1615.8459472656, 10631.857421875, -194.52275085449)},
			{"trashrun", Vector(1511.7976074219, 10568.026367188, -154.18737792969)},
			{"trashrun", Vector(1427.3323974609, 11426.681640625, -194.52275085449)},
			{"trashrun", Vector(1214.7565917969, 11113.711914063, -194.52275085449)},
			{"tier1", Vector(1023.7164306641, 11051.708984375, -194.52275085449)},
			{"trashrun", Vector(1037.8450927734, 11455.901367188, -58.522449493408)},
			{"trashrunrare", Vector(1057.5574951172, 11206.108398438, -58.522453308105)},
			{"trashrunrare", Vector(1225.1467285156, 10735.125976563, -70.522552490234)},
			{"trashrun", Vector(1216.2904052734, 11116.958007813, -58.522453308105)},
			{"tier1", Vector(1225.0418701172, 11518.762695313, -58.522453308105)},
			{"trashrun", Vector(1693.2006835938, 11396.79296875, -148.81050109863)},
			{"tier1", Vector(1756.6433105469, 11569.870117188, -158.67683410645)},
			{"tier1", Vector(2018.0592041016, 11428.108398438, -154.15031433105)},
			{"trashrun", Vector(1985.1700439453, 11610.674804688, -194.52275085449)},
			{"trashrunrare", Vector(1723.7236328125, 11255.53125, -194.52275085449)},
			{"trashrun", Vector(1991.2430419922, 11250.55859375, -194.52275085449)},
			{"trashrun", Vector(1786.2449951172, 11086.821289063, -194.52275085449)},
			{"trashrunrare", Vector(1727.8684082031, 10877.967773438, -177.84060668945)},
			{"trashrunrare", Vector(2074.4912109375, 10945.282226563, -148.99351501465)},
			{"tier1", Vector(2158.9230957031, 10994.013671875, -162.68617248535)},
			{"trashrun", Vector(2315.9741210938, 10977.341796875, -194.52275085449)},
			{"tier1", Vector(2362.9338378906, 10864.024414063, -161.71890258789)},
			{"trashrunrare", Vector(2367.8869628906, 10927.608398438, -161.71890258789)},
			{"tier1", Vector(1724.2905273438, 11163.49609375, -34.061656951904)},
			{"trashrun", Vector(1940.4703369141, 11133.717773438, -22.462999343872)},
			{"trashrunrare", Vector(1938.4716796875, 11099.951171875, -2.3984818458557)},
			{"trashrun", Vector(2117.7348632813, 10852.241210938, -58.522457122803)},
			{"trashrunrare", Vector(2301.5258789063, 11224.357421875, -58.522457122803)},
			{"tier1", Vector(2105.9802246094, 11044.657226563, -58.522457122803)},
			{"trashrunrare", Vector(2090.6652832031, 11041.116210938, 77.477554321289)},
			{"trashrun", Vector(2346.4819335938, 11206.42578125, 61.477554321289)},
			{"trashrunrare", Vector(2190.3601074219, 10925.258789063, 127.49268341064)},
			{"trashrunrare", Vector(2374.0676269531, 10854.921875, 77.477554321289)},
			{"trashrunrare", Vector(1922.5833740234, 10819.358398438, 77.477554321289)},
			{"tier1", Vector(1786.4940185547, 11076.049804688, 77.477554321289)},
			{"tier1", Vector(1724.7957763672, 11174.920898438, 113.97736358643)},
			{"trashrunrare", Vector(1718.9849853516, 11228.73046875, 113.97737121582)},
			{"trashrunrare", Vector(1929.0588378906, 11326.583984375, 83.089744567871)},
			{"tier1", Vector(1934.8790283203, 11293.608398438, 109.0612487793)},
			{"trashrun", Vector(1871.0969238281, 11347.146484375, 109.4772567749)},
			{"tier2", Vector(1927.9039306641, 11315.80078125, 134.75170898438)},
			{"trashrun", Vector(1987.7724609375, 11181.059570313, 77.477554321289)},
			{"trashrun", Vector(1676.0921630859, 11014.260742188, 77.477554321289)},
			{"trashrunrare", Vector(1323.4114990234, 11089.154296875, 77.477546691895)},
			{"trashrun", Vector(1014.1363525391, 11023.931640625, 77.477554321289)},
			{"trashrun", Vector(1195.0416259766, 11268.099609375, 77.477554321289)},
			{"trashrunrare", Vector(1088.5230712891, 11453.865234375, 77.477554321289)},
			{"tier1", Vector(1081.1314697266, 11503.625, 77.477554321289)},
			{"trashrun", Vector(1801.9819335938, 10587.607421875, 109.4772567749)},
			{"trashrun", Vector(2128.2016601563, 10470.4921875, -18.522449493408)},
			{"trashrun", Vector(1506.3637695313, 10370.111328125, 293.4772644043)},
			{"trashrunrare", Vector(1786.0754394531, 10753.297851563, 213.4772644043)},
			{"trashrun", Vector(1784.2194824219, 10966.255859375, 262.21655273438)},
			{"tier1", Vector(1981.7706298828, 11178.779296875, 247.08009338379)},
			{"tier2", Vector(1979.9647216797, 11253.302734375, 213.4772644043)},
			{"trashrun", Vector(1687.7515869141, 11227.014648438, 245.4772644043)},
			{"tier2", Vector(2155.8376464844, 10992.680664063, 237.82954406738)},
			{"tier1", Vector(2313.5192871094, 10996.315429688, 239.85620117188)},
			{"tier1", Vector(2226.2722167969, 10993.768554688, 271.81787109375)},
			{"tier2", Vector(2229.7810058594, 10998.2265625, 213.4772644043)},
			{"trashrunrare", Vector(2359.8986816406, 10845.603515625, 213.4772644043)},
			{"tier2", Vector(2164.5876464844, 10804.012695313, 239.94552612305)},
			{"tier1", Vector(2244.4873046875, 10808.943359375, 271.9912109375)},
			{"trashrunrare", Vector(2245.0583496094, 10805.454101563, 213.4772644043)},

		},
		events = { --rng events
			[1] = {
				name = "reinforcements", --name of event,
				valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
				func = function(id)
					local run = PLUGIN.curRuns[id]
					local diff = run.diff or 0
					local def = PLUGIN.areas[run.area]
					local players = run.players

					if(!players or #players == 0) then return end

					--have to do this becuz the player spawns arent suitable for npc spawning in this area
					defaultreinforcements(run, def, diff, def.reinfSpawns)
				end, --id being the id of the run in curRuns, function ran when event is picked,
				max = 1, --amount of times this event can be chosen per run,
			},--]]
			[2] = {
			name = "nothing", --name of event,
			valid = {[1] = true,[2] = true,[3] = true,[5] = true}, --optional field, only valid during objective ids listed,
			func = function(id)
			--	local run = PLUGIN.curRuns[id]

			end, --id being the id of the run in curRuns, function ran when event is picked,
			max = 4, --amount of times this event can be chosen per run,
			},

		},
		reinfSpawns = { --special npc spawns for events
			--same format as playerspawns
			{
				{Vector(891.11260986328, 9985.375, -194.52275085449), Angle(0, 78.645774841309, 0)},
				{Vector(990.31658935547, 9991.45703125, -194.52275085449), Angle(0, 80.492691040039, 0)},
				{Vector(1102.6812744141, 9972.912109375, -194.52275085449), Angle(0, 80.572998046875, 0)},
				{Vector(1188.4262695313, 9988.689453125, -194.52275085449), Angle(0, 80.653305053711, 0)},
			},
		},
		playerspawns = { --tables of tables of player spawns
			{
				{Vector(1098.4916992188, 11541.767578125, -321.71075439453), Angle(0, -86.014678955078, 0)},
				{Vector(1157.64453125, 11538.666015625, -314.18356323242), Angle(0, -92.920501708984, 0)},
				{Vector(1150.8168945313, 11620.822265625, -299.79815673828), Angle(0, -90.109954833984, 0)},
				{Vector(1081.8336181641, 11612.427734375, -313.43240356445), Angle(0, -74.772521972656, 0)},
			},
			{
				{Vector(2329.130859375, 10867.728515625, -322.04876708984), Angle(0, 109.43547821045, 0)},
				{Vector(2262.4055175781, 10823.866210938, -310.82376098633), Angle(0, 89.681571960449, 0)},
				{Vector(2189.451171875, 10840.54296875, -311.48550415039), Angle(0, 132.72241210938, 0)},
				{Vector(2232.8681640625, 10952.873046875, -324.63110351563), Angle(0, -168.33731079102, 0)},

			}
		},
		center = Vector(1668.9287109375, 10894.146484375, 79.477447509766),--the general center of the area
		centerrange = 1200, --the general length to encapsulate the entire area into a circle
		maxply = 4, --max player count, default values support up to 8 (minus the money giving, thatll error unless u specify a new table or change the default 1 or something else)
	},

}